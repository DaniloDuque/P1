// Terminal symbols
package org.example.cup;

import java_cup.runtime.*;
import java.util.Stack;
import org.example.node.*;
import org.example.table.*;
import org.example.generator.*;

parser code {:

    public static Stack<Integer> scopeStack = new Stack<>();
    public static SymbolTable symbolTable;

    public Parser(Scanner scn, SymbolTable sym) {
        super(scn);
        symbolTable = sym;
        scopeStack.push(0);  // Global scope
    }

    private void handleError(String message, Symbol sym) {
        if (sym != null) {
            System.out.println("Error: " + message + " at line " + (sym.left + 1) + ", column " + sym.right);
        } else {
            System.out.println("Error: " + message);
        }
    }

    private void handleError(String message, Object sym) {
        System.out.println("Error: " + message + " " + sym);

    }

    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        handleError(message, sym);
    }

    public void syntax_error(Symbol cur_token) {
        handleError("Syntax error", cur_token);
        // Intentar recuperarse ignorando el token actual
        try {
            // Intentamos sincronizar con el siguiente token que tiene sentido
            // Buscar el siguiente símbolo válido y continuar la ejecución
            while (cur_token != null && cur_token.sym != sym.FIN_EXPRESION) {
                cur_token = this.getScanner().next_token(); // Avanza al siguiente token
            }
        } catch (Exception e) {
            handleError("Error de sincronización", null);
        }
    }

    // Helper method to check if a type is numeric
    private boolean isNumeric(String type) {
        return type.equals("int") || type.equals("float");
    }

:}

terminal Integer ENTERO;
terminal Float FLOTANTE;
terminal Character CARACTER;
terminal String CADENA;
terminal Boolean BOOLEANO;
terminal COMA, IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN;
terminal DOS_PUNTOS, SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA;
terminal ASIGNACION, INCREMENTO, DECREMENTO, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
terminal IGUAL, DIFERENTE, AND, OR, NOT, PRINT, CORCHETE_ABRE, CORCHETE_CIERRA;
terminal MAIN, READ, LIT_ENTERO, LIT_FLOTANTE, LIT_CADENA, LIT_CHAR, LIT_BOOL;
terminal LLAVE_ABRE, LLAVE_CIERRA, PARENTESIS_ABRE, PARENTESIS_CIERRA, FIN_EXPRESION;
terminal IDENTIFICADOR, ERROR;

// Non-terminals
non terminal ASTNode program;
non terminal ASTNode func_declarations, func_declaration, params_opt, param_list;
non terminal ASTNode param, type, statement, statements;
non terminal ASTNode var_declaration, assignment, array_declaration;
non terminal ASTNode expression, arithmetic_expr, array_access;
non terminal ASTNode relational_expr, logical_expr;
non terminal ASTNode if_statement, else_opt, while_statement, for_statement;
non terminal ASTNode switch_statement, cases, case_statement, default_opt;
non terminal ASTNode for_initialization, for_update, opt_expression;
non terminal ASTNode io_statement, element_list, opt_equals_value;
non terminal ASTNode literal, error_nterm, function_call, arg_list;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence right POTENCIA;
precedence right NOT;
precedence right INCREMENTO, DECREMENTO;

/* Grammar rules */

program ::= func_declarations:f MAIN LLAVE_ABRE statements:s LLAVE_CIERRA
          {: RESULT = new ProgramNode(f, s); :}
          ;

func_declarations ::= func_declaration:f func_declarations:fs
                   {: RESULT = new FuncDeclsNode(f, fs); :}
                   | func_declaration:f
                   {: RESULT = new FuncDeclsNode(f, null); :}
                   ;

func_declaration ::= type:t IDENTIFICADOR:i PARENTESIS_ABRE {: scopeStack.push(scopeStack.peek() + 1); :} params_opt:p PARENTESIS_CIERRA LLAVE_ABRE {:
        // Check if the function is already declared in the current scope
        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
            handleError("Function '" + i.toString() + "' already declared in this scope", i);
        } else {
            // Add the function to the symbol table
            TypeNode nt = (TypeNode) t;
            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
        }
    :} statements:s LLAVE_CIERRA {:
        scopeStack.pop(); // Exit the scope
        RESULT = new FuncDeclNode(t, new IdentifierNode(i.toString()), p, s);
    :}
;

type ::= ENTERO
       {: RESULT = new TypeNode("int"); :}
       | FLOTANTE
       {: RESULT = new TypeNode("float"); :}
       | BOOLEANO
       {: RESULT = new TypeNode("boolean"); :}
       | CARACTER
       {: RESULT = new TypeNode("char"); :}
       | CADENA
       {: RESULT = new TypeNode("string"); :}
       ;

params_opt ::= param_list:p
             {: RESULT = p; :}
             | /* empty */
             {: RESULT = null; :}
             ;

param_list ::= param:p COMA param_list:pl
             {: RESULT = new ParamListNode(p, pl); :}
             | param:p
             {: RESULT = new ParamListNode(p, null); :}
             ;

param ::= type:t IDENTIFICADOR:i {:
        // Check if the parameter is already declared
        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
            handleError("Parameter '" + i.toString() + "' already declared", i);
        } else {
            // Add the parameter to the symbol table
            TypeNode nt = (TypeNode) t;
            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
            RESULT = new ParamNode(t, new IdentifierNode(i.toString()));
        }
:}
        ;

var_declaration ::= type:t IDENTIFICADOR:i opt_equals_value:ov
                    {:
                        // Check if the variable is already declared in the current scope
                        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                            handleError("Variable '" + i.toString() + "' already declared in this scope", i);
                        } else {
                            // Add the variable to the symbol table
                            TypeNode nt = (TypeNode) t;
                            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
                            RESULT = new VarDeclNode(t, new IdentifierNode(i.toString()), ov);
                        }
                    :}
                    ;

statements ::= statement:s statements:ss
             {: RESULT = new StatementsNode(s, ss); :}
             | /* empty */
             {: RESULT = null; :}
             ;

statement ::= var_declaration:v FIN_EXPRESION
            {: RESULT = v; :}
            | assignment:a  FIN_EXPRESION
            {: RESULT = a; :}
            | array_declaration:ad FIN_EXPRESION
            {: RESULT = ad; :}
            | if_statement:i
            {: RESULT = i; :}
            | while_statement:w
            {: RESULT = w; :}
            | for_statement:f
            {: RESULT = f; :}
            | switch_statement:sw
            {: RESULT = sw; :}
            | io_statement:io FIN_EXPRESION
            {: RESULT = io; :}
            | function_call:fc FIN_EXPRESION
            {: RESULT = fc; :}
            | RETURN opt_expression:e FIN_EXPRESION
            {: RESULT = new ReturnNode(e); :}
            | BREAK FIN_EXPRESION
            {: RESULT = new BreakNode(); :}
            | error_nterm:e
            {: RESULT = e; :}
            ;

function_call ::= IDENTIFICADOR:i PARENTESIS_ABRE arg_list:args PARENTESIS_CIERRA
                {:
                    // Check if the function is declared
                    if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                        handleError("Undeclared function '" + i.toString() + "'", i);
                    }
                    RESULT = new FuncCallNode(new IdentifierNode(i.toString()), args);
                :}
                ;

arg_list ::= /* empty */
           {: RESULT = null; :}
           | expression:a COMA arg_list:al
           {: RESULT = new ArgListNode(a, al); :}
           | expression:a
           {: RESULT = new ArgListNode(a, null); :}
           ;

array_declaration ::= type:t IDENTIFICADOR:i CORCHETE_ABRE CORCHETE_CIERRA ASIGNACION LLAVE_ABRE element_list:el LLAVE_CIERRA
                    {: RESULT = new ArrayDeclNode(t, new IdentifierNode(i.toString()), true, el); :}
                    | type:t IDENTIFICADOR:i CORCHETE_ABRE expression:e CORCHETE_CIERRA
                    {: RESULT = new ArrayDeclNode(t, new IdentifierNode(i.toString()), false, e); :}
                    ;

element_list ::= expression:e COMA element_list:el
               {: RESULT = new ElementListNode(e, el); :}
               | expression:e
               {: RESULT = new ElementListNode(e, null); :}
               ;

opt_equals_value ::= ASIGNACION expression:e
                   {: RESULT = e; :}
                   | /* empty */
                   {: RESULT = null; :}
                   ;

assignment ::= IDENTIFICADOR:i ASIGNACION expression:e
               {:
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Check if the types match
                   String varType = symbolTable.getType(i.toString(), scopeStack.peek());
                   String exprType = symbolTable.getType(e.toString(), scopeStack.peek());
                   if (exprType != null && varType != null && !varType.equals(exprType)) {
                       handleError("Type mismatch in assignment between ", i);
                   }
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), e);
               :}
           | IDENTIFICADOR:i INCREMENTO
               {:
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Create an expression that represents i + 1
                   ASTNode incrementExpr = new ArithmeticExprNode(
                       new IdentifierNode(i.toString()),
                       "+",
                       new LiteralNode("int", "1")
                   );
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), incrementExpr);
               :}
           | IDENTIFICADOR:i DECREMENTO
               {:
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Create an expression that represents i - 1
                   ASTNode decrementExpr = new ArithmeticExprNode(
                       new IdentifierNode(i.toString()),
                       "-",
                       new LiteralNode("int", "1")
                   );
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), decrementExpr);
               :}
           ;

opt_expression ::= /* empty */
                 {: RESULT = null; :}
                 | expression:e
                 {: RESULT = e; :}
                 ;

expression ::= arithmetic_expr:a
             {: RESULT = a; :}
             | relational_expr:r
             {: RESULT = r; :}
             | logical_expr:l
             {: RESULT = l; :}
             | literal:l
             {: RESULT = l; :}
             | IDENTIFICADOR:i
             {:
                 // Check if the variable is declared
                 if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                     handleError("Undeclared variable '" + i.toString() + "'", i);
                 }
                 RESULT = new IdentifierNode(i.toString());
             :}
             | PARENTESIS_ABRE expression:e PARENTESIS_CIERRA
             {: RESULT = e; :}
             | CORCHETE_ABRE expression:e CORCHETE_CIERRA
             {: RESULT = e; :}
             | array_access:aa
             {: RESULT = aa; :}
             | function_call:fc
             {: RESULT = fc; :}
             ;

array_access ::= IDENTIFICADOR:i CORCHETE_ABRE expression:e CORCHETE_CIERRA
               {:
                   // Check if the array is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared array '" + i.toString() + "'", i);
                   }
                   RESULT = new ArrayAccessNode(new IdentifierNode(i.toString()), e);
               :}
               ;

literal ::= LIT_ENTERO:lit
          {: RESULT = new LiteralNode("int", (String)lit); :}
          | LIT_FLOTANTE:lit
          {: RESULT = new LiteralNode("float", (String)lit); :}
          | LIT_CADENA:lit
          {: RESULT = new LiteralNode("string", (String)lit); :}
          | LIT_CHAR:lit
          {: RESULT = new LiteralNode("char", (String)lit); :}
          | LIT_BOOL:lit
          {: RESULT = new LiteralNode("bool", (String)lit); :}
          ;

arithmetic_expr ::= expression:e1 SUMA expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "+", e2);
                 :}
                 | expression:e1 RESTA expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "-", e2);
                 :}
                 | expression:e1 MULTIPLICACION expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "*", e2);
                 :}
                 | expression:e1 DIVISION expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "/", e2);
                 :}
                 | expression:e1 MODULO expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "%", e2);
                 :}
                 | expression:e1 POTENCIA expression:e2
                 {:
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "^", e2);
                 :}
                 | RESTA expression:e
                 {:
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for unary minus", e);
                     }
                     RESULT = new ArithmeticExprNode(new LiteralNode("int", "0"), "-", e);
                 :}
                 | expression:e INCREMENTO
                 {:
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for increment", e);
                     }
                     RESULT = new ArithmeticExprNode(e, "++", null);
                 :}
                 | expression:e DECREMENTO
                 {:
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for decrement", e);
                     }
                     RESULT = new ArithmeticExprNode(e, "--", null);
                 :}
                 ;

relational_expr ::= expression:e1 MENOR expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "<", e2);
              :}
              | expression:e1 MENOR_IGUAL expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "<=", e2);
              :}
              | expression:e1 MAYOR expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, ">", e2);
              :}
              | expression:e1 MAYOR_IGUAL expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, ">=", e2);
              :}
              | expression:e1 IGUAL expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in equality operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "==", e2);
              :}
              | expression:e1 DIFERENTE expression:e2
              {:
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in equality operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "!=", e2);
              :}
              ;

logical_expr ::= expression:e1 AND expression:e2
            {:
                // Check if both operands are of boolean type
                String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                if (!type1.equals("boolean") || !type2.equals("boolean")) {
                    handleError("Invalid operands for logical operation", e1);
                }
                RESULT = new LogicalExprNode(e1, "&&", e2);
            :}
            | expression:e1 OR expression:e2
            {:
                // Check if both operands are of boolean type
                String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                if (!type1.equals("boolean") || !type2.equals("boolean")) {
                    handleError("Invalid operands for logical operation", e1);
                }
                RESULT = new LogicalExprNode(e1, "||", e2);
            :}
            | NOT expression:e
            {:
                // Check if the operand is of boolean type
                String type = symbolTable.getType(e.toString(), scopeStack.peek());
                if (!type.equals("boolean")) {
                    handleError("Invalid operand for logical NOT", e);
                }
                RESULT = new LogicalExprNode(e, "!", null);
            :}
            ;

if_statement ::= IF PARENTESIS_ABRE expression:e PARENTESIS_CIERRA LLAVE_ABRE {:
 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope
:} statements:s LLAVE_CIERRA else_opt:eo {:
 scopeStack.pop();  // Exit the scope
 RESULT = new IfNode(e, s, eo);
:}
            ;

else_opt ::= ELSE LLAVE_ABRE {:
 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope
:} statements:s LLAVE_CIERRA {:
 scopeStack.pop();  // Exit the scope
 RESULT = s;
:}
        | /* empty */
        {: RESULT = null; :}
        ;

while_statement ::= WHILE PARENTESIS_ABRE expression:e PARENTESIS_CIERRA LLAVE_ABRE {:
 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope
:} statements:s LLAVE_CIERRA {:
 scopeStack.pop();  // Exit the scope
 RESULT = new WhileNode(e, s);
:}
              ;

for_statement ::= FOR PARENTESIS_ABRE {: scopeStack.push(scopeStack.peek() + 1); :} for_initialization  :fi FIN_EXPRESION opt_expression:c FIN_EXPRESION for_update:fu PARENTESIS_CIERRA LLAVE_ABRE statements:bloque LLAVE_CIERRA
             {: RESULT = new ForNode(fi, c, fu, bloque);
                scopeStack.pop();
             :}

             ;

for_initialization ::=
                  var_declaration:v
                  {: RESULT = v; :}
                  | assignment:a
                  {: RESULT = a; :}
                  | /* empty */
                  {: RESULT = null; :}
                  ;

for_update ::= assignment:a
          {: RESULT = a; :}
          | arithmetic_expr:e
          {: RESULT = e; :}
          | /* empty */
          {: RESULT = null; :}
          ;

io_statement ::= PRINT PARENTESIS_ABRE expression:e PARENTESIS_CIERRA
            {: RESULT = new PrintNode(e); :}
            | READ PARENTESIS_ABRE IDENTIFICADOR:i PARENTESIS_CIERRA
            {:
                // Check if the variable is declared
                if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                    handleError("Undeclared variable '" + i.toString() + "'", i);
                }
                RESULT = new ReadNode(i.toString());
            :}
            ;

error_nterm ::= ERROR {: handleError("Error encontrado", null); RESULT = new ErrorNode(); :}
       ;