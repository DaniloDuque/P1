
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example.cup;

import java_cup.runtime.*;
import java.util.Stack;
import org.example.node.*;
import org.example.table.*;
import org.example.generator.*;
import org.example.datasegment.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\045\002\000\002\046\002" +
    "\000\002\004\014\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\005\003\000\002\005\002\000\002\006\005\000\002\006" +
    "\003\000\002\007\004\000\002\013\005\000\002\012\004" +
    "\000\002\012\002\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\043\006\000\002\044\002\000\002\044\005\000" +
    "\002\044\003\000\002\015\012\000\002\015\007\000\002" +
    "\037\005\000\002\037\003\000\002\040\004\000\002\040" +
    "\002\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\035\002\000\002\035\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\020\006\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\047" +
    "\002\000\002\023\013\000\002\050\002\000\002\024\007" +
    "\000\002\024\002\000\002\051\002\000\002\025\012\000" +
    "\002\052\002\000\002\026\016\000\002\033\003\000\002" +
    "\033\003\000\002\033\002\000\002\034\003\000\002\034" +
    "\003\000\002\034\002\000\002\036\006\000\002\036\006" +
    "\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\014\004\010\005\011\006\014\007\004\010" +
    "\007\001\002\000\004\065\ufff6\001\002\000\016\004\010" +
    "\005\011\006\014\007\004\010\007\051\ufffe\001\002\000" +
    "\004\051\272\001\002\000\004\065\ufff8\001\002\000\004" +
    "\065\ufffa\001\002\000\004\065\ufff9\001\002\000\004\002" +
    "\271\001\002\000\004\065\015\001\002\000\004\065\ufff7" +
    "\001\002\000\004\062\016\001\002\000\016\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\063\ufffd\001\002\000\016" +
    "\004\010\005\011\006\014\007\004\010\007\063\ufff4\001" +
    "\002\000\006\011\267\063\ufff2\001\002\000\004\065\266" +
    "\001\002\000\004\063\024\001\002\000\004\063\ufff5\001" +
    "\002\000\004\060\025\001\002\000\040\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\012\ufffc\014\ufffc\015\ufffc\021" +
    "\ufffc\022\ufffc\046\ufffc\052\ufffc\061\ufffc\065\ufffc\066\ufffc" +
    "\001\002\000\040\004\010\005\011\006\014\007\004\010" +
    "\007\012\042\014\033\015\054\021\045\022\036\046\050" +
    "\052\027\061\uffee\065\051\066\037\001\002\000\004\062" +
    "\263\001\002\000\040\004\010\005\011\006\014\007\004" +
    "\010\007\012\042\014\033\015\054\021\045\022\036\046" +
    "\050\052\027\061\uffee\065\051\066\037\001\002\000\040" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\021\uffe2\022\uffe2\046\uffe2\052\uffe2\061\uffe2" +
    "\065\uffe2\066\uffe2\001\002\000\040\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\012\uffea\014\uffea\015\uffea\021\uffea" +
    "\022\uffea\046\uffea\052\uffea\061\uffea\065\uffea\066\uffea\001" +
    "\002\000\004\062\253\001\002\000\004\065\237\001\002" +
    "\000\040\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\014\uffe9\015\uffe9\021\uffe9\022\uffe9\046\uffe9\052\uffe9" +
    "\061\uffe9\065\uffe9\066\uffe9\001\002\000\030\025\105\045" +
    "\103\047\076\053\075\054\067\055\071\056\074\057\101" +
    "\062\073\064\uffd4\065\106\001\002\000\040\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014\uffa0\015\uffa0" +
    "\021\uffa0\022\uffa0\046\uffa0\052\uffa0\061\uffa0\065\uffa0\066" +
    "\uffa0\001\002\000\004\064\234\001\002\000\004\064\233" +
    "\001\002\000\004\062\216\001\002\000\040\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\021\uffe8\022\uffe8\046\uffe8\052\uffe8\061\uffe8\065\uffe8\066" +
    "\uffe8\001\002\000\040\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\014\uffe7\015\uffe7\021\uffe7\022\uffe7\046" +
    "\uffe7\052\uffe7\061\uffe7\065\uffe7\066\uffe7\001\002\000\004" +
    "\064\215\001\002\000\004\064\214\001\002\000\004\064" +
    "\213\001\002\000\004\062\210\001\002\000\012\032\065" +
    "\033\066\034\064\062\111\001\002\000\004\064\207\001" +
    "\002\000\004\061\206\001\002\000\004\062\055\001\002" +
    "\000\020\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\064" +
    "\uffaa\065\uffaa\001\002\000\020\004\010\005\011\006\014" +
    "\007\004\010\007\064\uffa6\065\063\001\002\000\004\064" +
    "\uffa7\001\002\000\004\064\171\001\002\000\004\065\165" +
    "\001\002\000\004\064\uffa8\001\002\000\010\032\065\033" +
    "\066\034\064\001\002\000\006\063\uffd5\064\uffd5\001\002" +
    "\000\026\025\105\045\103\047\076\053\075\054\067\055" +
    "\071\056\074\057\101\062\073\065\106\001\002\000\006" +
    "\063\uffd6\064\uffd6\001\002\000\054\011\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\050\uffc7\061\uffc7\063\uffc7\064\uffc7\001\002" +
    "\000\054\011\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\050\uffd2\061" +
    "\uffd2\063\uffd2\064\uffd2\001\002\000\054\011\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\050\uffc6\061\uffc6\063\uffc6\064\uffc6\001" +
    "\002\000\054\011\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\050\uffca" +
    "\061\uffca\063\uffca\064\uffca\001\002\000\026\025\105\045" +
    "\103\047\076\053\075\054\067\055\071\056\074\057\101" +
    "\062\073\065\106\001\002\000\054\011\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\050\uffc5\061\uffc5\063\uffc5\064\uffc5\001\002" +
    "\000\054\011\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\050\uffc8\061" +
    "\uffc8\063\uffc8\064\uffc8\001\002\000\026\025\105\045\103" +
    "\047\076\053\075\054\067\055\071\056\074\057\101\062" +
    "\073\065\106\001\002\000\046\024\121\025\132\026\127" +
    "\027\123\030\125\031\117\033\130\034\131\035\120\036" +
    "\135\037\124\040\122\041\126\042\133\043\115\044\134" +
    "\063\uffd7\064\uffd7\001\002\000\054\011\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\050\uffd1\061\uffd1\063\uffd1\064\uffd1\001\002" +
    "\000\054\011\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\050\uffc4\061" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\054\011\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\050\uffd0\061\uffd0\063\uffd0\064\uffd0\001" +
    "\002\000\026\025\105\045\103\047\076\053\075\054\067" +
    "\055\071\056\074\057\101\062\073\065\106\001\002\000" +
    "\054\011\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\050\uffcf\061\uffcf" +
    "\063\uffcf\064\uffcf\001\002\000\026\025\105\045\103\047" +
    "\076\053\075\054\067\055\071\056\074\057\101\062\073" +
    "\065\106\001\002\000\060\011\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\047\110\050\uffce\061\uffce\062\111\063\uffce\064\uffce" +
    "\001\002\000\054\011\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\050" +
    "\uffcb\061\uffcb\063\uffcb\064\uffcb\001\002\000\026\025\105" +
    "\045\103\047\076\053\075\054\067\055\071\056\074\057" +
    "\101\062\073\065\106\001\002\000\030\025\105\045\103" +
    "\047\076\053\075\054\067\055\071\056\074\057\101\062" +
    "\073\063\uffe0\065\106\001\002\000\046\011\116\024\121" +
    "\025\132\026\127\027\123\030\125\031\117\033\130\034" +
    "\131\035\120\036\135\037\124\040\122\041\126\042\133" +
    "\043\115\044\134\063\uffde\001\002\000\004\063\114\001" +
    "\002\000\054\011\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\050\uffe1" +
    "\061\uffe1\063\uffe1\064\uffe1\001\002\000\026\025\105\045" +
    "\103\047\076\053\075\054\067\055\071\056\074\057\101" +
    "\062\073\065\106\001\002\000\030\025\105\045\103\047" +
    "\076\053\075\054\067\055\071\056\074\057\101\062\073" +
    "\063\uffe0\065\106\001\002\000\026\025\105\045\103\047" +
    "\076\053\075\054\067\055\071\056\074\057\101\062\073" +
    "\065\106\001\002\000\026\025\105\045\103\047\076\053" +
    "\075\054\067\055\071\056\074\057\101\062\073\065\106" +
    "\001\002\000\026\025\105\045\103\047\076\053\075\054" +
    "\067\055\071\056\074\057\101\062\073\065\106\001\002" +
    "\000\026\025\105\045\103\047\076\053\075\054\067\055" +
    "\071\056\074\057\101\062\073\065\106\001\002\000\026" +
    "\025\105\045\103\047\076\053\075\054\067\055\071\056" +
    "\074\057\101\062\073\065\106\001\002\000\026\025\105" +
    "\045\103\047\076\053\075\054\067\055\071\056\074\057" +
    "\101\062\073\065\106\001\002\000\026\025\105\045\103" +
    "\047\076\053\075\054\067\055\071\056\074\057\101\062" +
    "\073\065\106\001\002\000\026\025\105\045\103\047\076" +
    "\053\075\054\067\055\071\056\074\057\101\062\073\065" +
    "\106\001\002\000\026\025\105\045\103\047\076\053\075" +
    "\054\067\055\071\056\074\057\101\062\073\065\106\001" +
    "\002\000\054\011\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\050\uffbc" +
    "\061\uffbc\063\uffbc\064\uffbc\001\002\000\054\011\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\050\uffbb\061\uffbb\063\uffbb\064\uffbb" +
    "\001\002\000\026\025\105\045\103\047\076\053\075\054" +
    "\067\055\071\056\074\057\101\062\073\065\106\001\002" +
    "\000\026\025\105\045\103\047\076\053\075\054\067\055" +
    "\071\056\074\057\101\062\073\065\106\001\002\000\026" +
    "\025\105\045\103\047\076\053\075\054\067\055\071\056" +
    "\074\057\101\062\073\065\106\001\002\000\026\025\105" +
    "\045\103\047\076\053\075\054\067\055\071\056\074\057" +
    "\101\062\073\065\106\001\002\000\054\011\uffb9\024\121" +
    "\025\132\026\127\027\123\030\125\031\117\033\130\034" +
    "\131\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\050\uffb9\061\uffb9\063\uffb9\064\uffb9\001" +
    "\002\000\054\011\uffb3\024\121\025\132\026\127\027\123" +
    "\030\125\031\117\033\130\034\131\035\120\036\135\037" +
    "\124\040\122\041\126\042\133\043\115\044\uffb3\050\uffb3" +
    "\061\uffb3\063\uffb3\064\uffb3\001\002\000\054\011\uffb5\024" +
    "\121\025\132\026\127\027\123\030\125\031\117\033\130" +
    "\034\131\035\120\036\135\037\124\040\122\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\050\uffb5\061\uffb5\063\uffb5\064\uffb5" +
    "\001\002\000\054\011\uffc2\024\uffc2\025\uffc2\026\127\027" +
    "\123\030\125\031\117\033\130\034\131\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\050" +
    "\uffc2\061\uffc2\063\uffc2\064\uffc2\001\002\000\054\011\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\117\033" +
    "\130\034\131\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\050\uffc0\061\uffc0\063\uffc0\064" +
    "\uffc0\001\002\000\054\011\uffb6\024\121\025\132\026\127" +
    "\027\123\030\125\031\117\033\130\034\131\035\120\036" +
    "\135\037\124\040\122\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\050\uffb6\061\uffb6\063\uffb6\064\uffb6\001\002\000\054\011" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\117" +
    "\033\130\034\131\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\050\uffbf\061\uffbf\063\uffbf" +
    "\064\uffbf\001\002\000\054\011\uffb8\024\121\025\132\026" +
    "\127\027\123\030\125\031\117\033\130\034\131\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\050\uffb8\061\uffb8\063\uffb8\064\uffb8\001\002\000\054" +
    "\011\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\117\033\130\034\131\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\050\uffc1\061\uffc1\063" +
    "\uffc1\064\uffc1\001\002\000\054\011\uffb7\024\121\025\132" +
    "\026\127\027\123\030\125\031\117\033\130\034\131\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\050\uffb7\061\uffb7\063\uffb7\064\uffb7\001\002\000" +
    "\054\011\uffc3\024\uffc3\025\uffc3\026\127\027\123\030\125" +
    "\031\117\033\130\034\131\035\uffc3\036\uffc3\037\uffc3\040" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\050\uffc3\061\uffc3" +
    "\063\uffc3\064\uffc3\001\002\000\054\011\uffba\024\121\025" +
    "\132\026\127\027\123\030\125\031\117\033\130\034\131" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\050\uffba\061\uffba\063\uffba\064\uffba\001\002" +
    "\000\054\011\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\117\033\130\034\131\035\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\050\uffbe\061" +
    "\uffbe\063\uffbe\064\uffbe\001\002\000\004\063\uffdf\001\002" +
    "\000\054\011\uffb4\024\121\025\132\026\127\027\123\030" +
    "\125\031\117\033\130\034\131\035\120\036\135\037\124" +
    "\040\122\041\126\042\133\043\uffb4\044\uffb4\050\uffb4\061" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\044\024\121\025\132" +
    "\026\127\027\123\030\125\031\117\033\130\034\131\035" +
    "\120\036\135\037\124\040\122\041\126\042\133\043\115" +
    "\044\134\050\156\001\002\000\054\011\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\050\uffc9\061\uffc9\063\uffc9\064\uffc9\001\002" +
    "\000\054\011\uffbd\024\uffbd\025\uffbd\026\127\027\123\030" +
    "\125\031\117\033\130\034\131\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\050\uffbd\061" +
    "\uffbd\063\uffbd\064\uffbd\001\002\000\054\011\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\130\034" +
    "\131\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\050\uffb2\061\uffb2\063\uffb2\064\uffb2\001" +
    "\002\000\044\024\121\025\132\026\127\027\123\030\125" +
    "\031\117\033\130\034\131\035\120\036\135\037\124\040" +
    "\122\041\126\042\133\043\115\044\134\050\162\001\002" +
    "\000\054\011\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\050\uffcc\061" +
    "\uffcc\063\uffcc\064\uffcc\001\002\000\044\024\121\025\132" +
    "\026\127\027\123\030\125\031\117\033\130\034\131\035" +
    "\120\036\135\037\124\040\122\041\126\042\133\043\115" +
    "\044\134\063\164\001\002\000\054\011\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\050\uffcd\061\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\006\032\166\064\uffd8\001\002\000\026\025\105\045" +
    "\103\047\076\053\075\054\067\055\071\056\074\057\101" +
    "\062\073\065\106\001\002\000\004\064\ufff0\001\002\000" +
    "\044\024\121\025\132\026\127\027\123\030\125\031\117" +
    "\033\130\034\131\035\120\036\135\037\124\040\122\041" +
    "\126\042\133\043\115\044\134\064\uffd9\001\002\000\030" +
    "\025\105\045\103\047\076\053\075\054\067\055\071\056" +
    "\074\057\101\062\073\064\uffd4\065\106\001\002\000\004" +
    "\064\174\001\002\000\044\024\121\025\132\026\127\027" +
    "\123\030\125\031\117\033\130\034\131\035\120\036\135" +
    "\037\124\040\122\041\126\042\133\043\115\044\134\064" +
    "\uffd3\001\002\000\030\025\105\045\103\047\076\053\075" +
    "\054\067\055\071\056\074\057\101\062\073\063\uffa3\065" +
    "\201\001\002\000\004\063\202\001\002\000\042\024\121" +
    "\025\132\026\127\027\123\030\125\031\117\033\130\034" +
    "\131\035\120\036\135\037\124\040\122\041\126\042\133" +
    "\043\115\044\134\001\002\000\044\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044" +
    "\uffd2\063\uffa4\001\002\000\004\063\uffa5\001\002\000\050" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\065\033\066\034\064\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\047\110\062\111\001" +
    "\002\000\004\060\203\001\002\000\040\004\010\005\011" +
    "\006\014\007\004\010\007\012\042\014\033\015\054\021" +
    "\045\022\036\046\050\052\027\061\uffee\065\051\066\037" +
    "\001\002\000\004\061\205\001\002\000\040\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\014\uffa9\015\uffa9" +
    "\021\uffa9\022\uffa9\046\uffa9\052\uffa9\061\uffa9\065\uffa9\066" +
    "\uffa9\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\051\ufffb\001\002\000\040\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\021\uffeb" +
    "\022\uffeb\046\uffeb\052\uffeb\061\uffeb\065\uffeb\066\uffeb\001" +
    "\002\000\026\025\105\045\103\047\076\053\075\054\067" +
    "\055\071\056\074\057\101\062\073\065\106\001\002\000" +
    "\044\024\121\025\132\026\127\027\123\030\125\031\117" +
    "\033\130\034\131\035\120\036\135\037\124\040\122\041" +
    "\126\042\133\043\115\044\134\063\212\001\002\000\004" +
    "\064\uffa2\001\002\000\040\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\012\uffec\014\uffec\015\uffec\021\uffec\022\uffec" +
    "\046\uffec\052\uffec\061\uffec\065\uffec\066\uffec\001\002\000" +
    "\040\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed" +
    "\014\uffed\015\uffed\021\uffed\022\uffed\046\uffed\052\uffed\061" +
    "\uffed\065\uffed\066\uffed\001\002\000\040\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\014\uffe3\015\uffe3\021" +
    "\uffe3\022\uffe3\046\uffe3\052\uffe3\061\uffe3\065\uffe3\066\uffe3" +
    "\001\002\000\026\025\105\045\103\047\076\053\075\054" +
    "\067\055\071\056\074\057\101\062\073\065\106\001\002" +
    "\000\044\024\121\025\132\026\127\027\123\030\125\031" +
    "\117\033\130\034\131\035\120\036\135\037\124\040\122" +
    "\041\126\042\133\043\115\044\134\063\220\001\002\000" +
    "\004\060\221\001\002\000\040\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\012\uffb1\014\uffb1\015\uffb1\021\uffb1\022" +
    "\uffb1\046\uffb1\052\uffb1\061\uffb1\065\uffb1\066\uffb1\001\002" +
    "\000\040\004\010\005\011\006\014\007\004\010\007\012" +
    "\042\014\033\015\054\021\045\022\036\046\050\052\027" +
    "\061\uffee\065\051\066\037\001\002\000\004\061\224\001" +
    "\002\000\042\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\225\014\uffad\015\uffad\021\uffad\022\uffad\046" +
    "\uffad\052\uffad\061\uffad\065\uffad\066\uffad\001\002\000\004" +
    "\060\227\001\002\000\040\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\012\uffb0\014\uffb0\015\uffb0\021\uffb0\022\uffb0" +
    "\046\uffb0\052\uffb0\061\uffb0\065\uffb0\066\uffb0\001\002\000" +
    "\040\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf" +
    "\014\uffaf\015\uffaf\021\uffaf\022\uffaf\046\uffaf\052\uffaf\061" +
    "\uffaf\065\uffaf\066\uffaf\001\002\000\040\004\010\005\011" +
    "\006\014\007\004\010\007\012\042\014\033\015\054\021" +
    "\045\022\036\046\050\052\027\061\uffee\065\051\066\037" +
    "\001\002\000\004\061\232\001\002\000\040\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\012\uffae\014\uffae\015\uffae" +
    "\021\uffae\022\uffae\046\uffae\052\uffae\061\uffae\065\uffae\066" +
    "\uffae\001\002\000\040\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\012\uffe6\014\uffe6\015\uffe6\021\uffe6\022\uffe6\046" +
    "\uffe6\052\uffe6\061\uffe6\065\uffe6\066\uffe6\001\002\000\040" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\021\uffe5\022\uffe5\046\uffe5\052\uffe5\061\uffe5" +
    "\065\uffe5\066\uffe5\001\002\000\004\064\236\001\002\000" +
    "\040\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\021\uffe4\022\uffe4\046\uffe4\052\uffe4\061" +
    "\uffe4\065\uffe4\066\uffe4\001\002\000\010\032\166\047\240" +
    "\064\uffd8\001\002\000\030\025\105\045\103\047\076\050" +
    "\241\053\075\054\067\055\071\056\074\057\101\062\073" +
    "\065\106\001\002\000\004\032\244\001\002\000\044\024" +
    "\121\025\132\026\127\027\123\030\125\031\117\033\130" +
    "\034\131\035\120\036\135\037\124\040\122\041\126\042" +
    "\133\043\115\044\134\050\243\001\002\000\004\064\uffdc" +
    "\001\002\000\004\060\245\001\002\000\026\025\105\045" +
    "\103\047\076\053\075\054\067\055\071\056\074\057\101" +
    "\062\073\065\106\001\002\000\004\061\252\001\002\000" +
    "\046\011\250\024\121\025\132\026\127\027\123\030\125" +
    "\031\117\033\130\034\131\035\120\036\135\037\124\040" +
    "\122\041\126\042\133\043\115\044\134\061\uffda\001\002" +
    "\000\026\025\105\045\103\047\076\053\075\054\067\055" +
    "\071\056\074\057\101\062\073\065\106\001\002\000\004" +
    "\061\uffdb\001\002\000\004\064\uffdd\001\002\000\026\025" +
    "\105\045\103\047\076\053\075\054\067\055\071\056\074" +
    "\057\101\062\073\065\106\001\002\000\044\024\121\025" +
    "\132\026\127\027\123\030\125\031\117\033\130\034\131" +
    "\035\120\036\135\037\124\040\122\041\126\042\133\043" +
    "\115\044\134\063\255\001\002\000\004\060\256\001\002" +
    "\000\040\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\012" +
    "\uffac\014\uffac\015\uffac\021\uffac\022\uffac\046\uffac\052\uffac" +
    "\061\uffac\065\uffac\066\uffac\001\002\000\040\004\010\005" +
    "\011\006\014\007\004\010\007\012\042\014\033\015\054" +
    "\021\045\022\036\046\050\052\027\061\uffee\065\051\066" +
    "\037\001\002\000\004\061\261\001\002\000\040\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\014\uffab\015" +
    "\uffab\021\uffab\022\uffab\046\uffab\052\uffab\061\uffab\065\uffab" +
    "\066\uffab\001\002\000\004\061\uffef\001\002\000\004\065" +
    "\264\001\002\000\004\063\265\001\002\000\004\064\uffa1" +
    "\001\002\000\006\011\ufff1\063\ufff1\001\002\000\014\004" +
    "\010\005\011\006\014\007\004\010\007\001\002\000\004" +
    "\063\ufff3\001\002\000\004\002\000\001\002\000\004\060" +
    "\273\001\002\000\040\004\010\005\011\006\014\007\004" +
    "\010\007\012\042\014\033\015\054\021\045\022\036\046" +
    "\050\052\027\061\uffee\065\051\066\037\001\002\000\004" +
    "\061\275\001\002\000\004\002\001\001\002\000\004\051" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\012\002\011\003\005\004\004\010\012\001" +
    "\001\000\002\001\001\000\010\003\275\004\004\010\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\016\001" +
    "\001\000\012\005\021\006\022\007\017\010\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\025\001\001" +
    "\000\034\010\033\011\027\012\052\013\045\014\046\015" +
    "\051\023\031\025\034\026\042\027\043\036\040\042\030" +
    "\043\037\001\001\000\002\001\001\000\034\010\033\011" +
    "\027\012\261\013\045\014\046\015\051\023\031\025\034" +
    "\026\042\027\043\036\040\042\030\043\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\172\017\067\020" +
    "\106\021\077\022\101\035\234\041\103\043\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\055\001\001\000\012\010" +
    "\060\013\061\014\056\033\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\076\017\067" +
    "\020\106\021\077\022\101\041\103\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\162\017\067\020" +
    "\106\021\077\022\101\041\103\043\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\160\017\067\020" +
    "\106\021\077\022\101\041\103\043\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\157\017\067\020\106\021\077\022\101" +
    "\041\103\043\071\001\001\000\002\001\001\000\020\016" +
    "\156\017\067\020\106\021\077\022\101\041\103\043\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\154\017\067\020\106\021\077\022\101\041\103\043\071" +
    "\001\001\000\022\016\111\017\067\020\106\021\077\022" +
    "\101\041\103\043\071\044\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\153\017" +
    "\067\020\106\021\077\022\101\041\103\043\071\001\001" +
    "\000\022\016\111\017\067\020\106\021\077\022\101\041" +
    "\103\043\071\044\152\001\001\000\020\016\151\017\067" +
    "\020\106\021\077\022\101\041\103\043\071\001\001\000" +
    "\020\016\150\017\067\020\106\021\077\022\101\041\103" +
    "\043\071\001\001\000\020\016\147\017\067\020\106\021" +
    "\077\022\101\041\103\043\071\001\001\000\020\016\146" +
    "\017\067\020\106\021\077\022\101\041\103\043\071\001" +
    "\001\000\020\016\145\017\067\020\106\021\077\022\101" +
    "\041\103\043\071\001\001\000\020\016\144\017\067\020" +
    "\106\021\077\022\101\041\103\043\071\001\001\000\020" +
    "\016\143\017\067\020\106\021\077\022\101\041\103\043" +
    "\071\001\001\000\020\016\142\017\067\020\106\021\077" +
    "\022\101\041\103\043\071\001\001\000\020\016\141\017" +
    "\067\020\106\021\077\022\101\041\103\043\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\140\017" +
    "\067\020\106\021\077\022\101\041\103\043\071\001\001" +
    "\000\020\016\137\017\067\020\106\021\077\022\101\041" +
    "\103\043\071\001\001\000\020\016\136\017\067\020\106" +
    "\021\077\022\101\041\103\043\071\001\001\000\020\016" +
    "\135\017\067\020\106\021\077\022\101\041\103\043\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\166\001\001\000\020\016\167" +
    "\017\067\020\106\021\077\022\101\041\103\043\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\172" +
    "\017\067\020\106\021\077\022\101\035\171\041\103\043" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\177\016\175\017\176\020\106\021\077\022\101\034" +
    "\174\041\103\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\010\033\011\027\012\203" +
    "\013\045\014\046\015\051\023\031\025\034\026\042\027" +
    "\043\036\040\042\030\043\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\210\017\067\020\106\021\077\022\101\041\103" +
    "\043\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\216\017\067\020\106\021\077\022\101\041\103\043" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\221\001\001\000\034\010\033\011\027\012\222\013" +
    "\045\014\046\015\051\023\031\025\034\026\042\027\043" +
    "\036\040\042\030\043\037\001\001\000\002\001\001\000" +
    "\004\024\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\227\001\001\000\034\010\033\011\027\012" +
    "\230\013\045\014\046\015\051\023\031\025\034\026\042" +
    "\027\043\036\040\042\030\043\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\166\001" +
    "\001\000\020\016\241\017\067\020\106\021\077\022\101" +
    "\041\103\043\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\246" +
    "\017\067\020\106\021\077\022\101\037\245\041\103\043" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\246\017\067\020\106\021\077\022\101\037\250\041" +
    "\103\043\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\253\017\067\020\106\021\077\022\101\041" +
    "\103\043\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\256\001\001\000\034\010\033\011\027\012" +
    "\257\013\045\014\046\015\051\023\031\025\034\026\042" +
    "\027\043\036\040\042\030\043\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\267\007\017\010\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\033\011" +
    "\027\012\273\013\045\014\046\015\051\023\031\025\034" +
    "\026\042\027\043\036\040\042\030\043\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static Stack<Integer> scopeStack = new Stack<>();
    public static SymbolTable symbolTable;
    public static DataSegment dataSegment;

    public Parser(Scanner scn, SymbolTable sym) {
        super(scn);
        symbolTable = sym;
        dataSegment = new DataSegment();
        scopeStack.push(0);  // Global scope
    }

    private void handleError(String message, Symbol sym) {
        if (sym != null) {
            System.out.println("Error: " + message + " at line " + (sym.left + 1) + ", column " + sym.right);
        } else {
            System.out.println("Error: " + message);
        }
    }

    private void handleError(String message, Object sym) {
        System.out.println("Error: " + message + " " + sym);

    }

    private void handleWarning(String message) {
        System.out.println(message);
    }

    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        handleError(message, sym);
    }

    public void syntax_error(Symbol cur_token) {
        handleError("Syntax error", cur_token);
        // Intentar recuperarse ignorando el token actual
        try {
            // Intentamos sincronizar con el siguiente token que tiene sentido
            // Buscar el siguiente símbolo válido y continuar la ejecución
            while (cur_token != null && cur_token.sym != sym.FIN_EXPRESION) {
                cur_token = this.getScanner().next_token(); // Avanza al siguiente token
            }
        } catch (Exception e) {
            handleError("Error de sincronización", null);
        }
    }

    // Helper method to check if a type is numeric
    private boolean isNumeric(String type) {
        return type.equals("int") || type.equals("float");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= func_declarations MAIN LLAVE_ABRE statements LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProgramNode(f, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // func_declarations ::= func_declaration func_declarations 
            {
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode fs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDeclsNode(f, fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // func_declarations ::= func_declaration 
            {
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FuncDeclsNode(f, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 scopeStack.push(scopeStack.peek() + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              ASTNode RESULT =(ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

        // Check if the function is already declared in the current scope
        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
            handleError("Function '" + i.toString() + "' already declared in this scope", i);
        } else {
            // Add the function to the symbol table
            TypeNode nt = (TypeNode) t;
            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_declaration ::= type IDENTIFICADOR PARENTESIS_ABRE NT$0 params_opt PARENTESIS_CIERRA LLAVE_ABRE NT$1 statements LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        scopeStack.pop(); // Exit the scope
        RESULT = new FuncDeclNode(t, new IdentifierNode(i.toString()), p, s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= ENTERO 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode("int"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= FLOTANTE 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode("float"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEANO 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode("boolean"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= CARACTER 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode("char"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= CADENA 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode("string"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params_opt ::= param_list 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_opt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params_opt ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_opt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_list ::= param COMA param_list 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode pl = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamListNode(p, pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParamListNode(p, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= type IDENTIFICADOR 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        // Check if the parameter is already declared
        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
            handleError("Parameter '" + i.toString() + "' already declared", i);
        } else {
            // Add the parameter to the symbol table
            TypeNode nt = (TypeNode) t;
            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
            RESULT = new ParamNode(t, new IdentifierNode(i.toString()));
            dataSegment.addData(nt.getType(), i.toString(), scopeStack.peek());
        }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_declaration ::= type IDENTIFICADOR opt_equals_value 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ovleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode ov = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        // Check if the variable is already declared in the current scope
                        if (symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                            handleError("Variable '" + i.toString() + "' already declared in this scope", i);
                        } else {
                            // Add the variable to the symbol table
                            TypeNode nt = (TypeNode) t;
                            symbolTable.addSymbol(i.toString(), nt.getType(), scopeStack.peek(), ileft, iright);
                            RESULT = new VarDeclNode(t, new IdentifierNode(i.toString()), ov);
                            dataSegment.addData(nt.getType(), i.toString(), scopeStack.peek());
                        }
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statement statements 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode ss = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StatementsNode(s, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= var_declaration FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= assignment FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= array_declaration FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode ad = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= if_statement 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= while_statement 
            {
              ASTNode RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode w = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= for_statement 
            {
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= switch_statement 
            {
              ASTNode RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode sw = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sw; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= io_statement FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int ioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode io = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = io; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= function_call FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode fc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= RETURN opt_expression FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnNode(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= BREAK FIN_EXPRESION 
            {
              ASTNode RESULT =null;
		 RESULT = new BreakNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= error_nterm 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_call ::= IDENTIFICADOR PARENTESIS_ABRE arg_list PARENTESIS_CIERRA 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode args = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    // Check if the function is declared
                    if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                        handleWarning("Warning: Undeclared function '" + i.toString() + "' " + i);
                    }
                    RESULT = new FuncCallNode(new IdentifierNode(i.toString()), args);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arg_list ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arg_list ::= expression COMA arg_list 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode al = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgListNode(a, al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arg_list ::= expression 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArgListNode(a, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // array_declaration ::= type IDENTIFICADOR CORCHETE_ABRE CORCHETE_CIERRA ASIGNACION LLAVE_ABRE element_list LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode el = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclNode(t, new IdentifierNode(i.toString()), true, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // array_declaration ::= type IDENTIFICADOR CORCHETE_ABRE expression CORCHETE_CIERRA 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayDeclNode(t, new IdentifierNode(i.toString()), false, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // element_list ::= expression COMA element_list 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode el = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElementListNode(e, el); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // element_list ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ElementListNode(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_equals_value ::= ASIGNACION expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_equals_value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_equals_value ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_equals_value",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment ::= IDENTIFICADOR ASIGNACION expression 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Check if the types match
                   String varType = symbolTable.getType(i.toString(), scopeStack.peek());
                   String exprType = symbolTable.getType(e.toString(), scopeStack.peek());
                   if (exprType != null && varType != null && !varType.equals(exprType)) {
                       handleError("Type mismatch in assignment between ", i);
                   }
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), e);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment ::= IDENTIFICADOR INCREMENTO 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Create an expression that represents i + 1
                   ASTNode incrementExpr = new ArithmeticExprNode(
                       new IdentifierNode(i.toString()),
                       "+",
                       new LiteralNode("int", "1")
                   );
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), incrementExpr);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment ::= IDENTIFICADOR DECREMENTO 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   // Check if the variable is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared variable '" + i.toString() + "'", i);
                   }
                   // Create an expression that represents i - 1
                   ASTNode decrementExpr = new ArithmeticExprNode(
                       new IdentifierNode(i.toString()),
                       "-",
                       new LiteralNode("int", "1")
                   );
                   RESULT = new AssignNode(new IdentifierNode(i.toString()), decrementExpr);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opt_expression ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opt_expression ::= expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= arithmetic_expr 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= relational_expr 
            {
              ASTNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode r = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= logical_expr 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= literal 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= IDENTIFICADOR 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                 // Check if the variable is declared
                 if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                     handleError("Undeclared variable '" + i.toString() + "'", i);
                 }
                 RESULT = new IdentifierNode(i.toString());
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= PARENTESIS_ABRE expression PARENTESIS_CIERRA 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= CORCHETE_ABRE expression CORCHETE_CIERRA 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= array_access 
            {
              ASTNode RESULT =null;
		int aaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode aa = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = aa; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= function_call 
            {
              ASTNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode fc = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // array_access ::= IDENTIFICADOR CORCHETE_ABRE expression CORCHETE_CIERRA 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   // Check if the array is declared
                   if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                       handleError("Undeclared array '" + i.toString() + "'", i);
                   }
                   RESULT = new ArrayAccessNode(new IdentifierNode(i.toString()), e);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_access",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= LIT_ENTERO 
            {
              ASTNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode("int", (String)lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= LIT_FLOTANTE 
            {
              ASTNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode("float", (String)lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= LIT_CADENA 
            {
              ASTNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode("string", (String)lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= LIT_CHAR 
            {
              ASTNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode("char", (String)lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= LIT_BOOL 
            {
              ASTNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralNode("bool", (String)lit); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithmetic_expr ::= expression SUMA expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "+", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithmetic_expr ::= expression RESTA expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "-", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithmetic_expr ::= expression MULTIPLICACION expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "*", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithmetic_expr ::= expression DIVISION expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "/", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithmetic_expr ::= expression MODULO expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "%", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithmetic_expr ::= expression POTENCIA expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if both operands are of numeric type
                     String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                     String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                     if (!isNumeric(type1) || !isNumeric(type2)) {
                         handleError("Invalid operands for arithmetic operation", e1);
                     }
                     RESULT = new ArithmeticExprNode(e1, "^", e2);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithmetic_expr ::= RESTA expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for unary minus", e);
                     }
                     RESULT = new ArithmeticExprNode(new LiteralNode("int", "0"), "-", e);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithmetic_expr ::= expression INCREMENTO 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for increment", e);
                     }
                     RESULT = new ArithmeticExprNode(e, "++", null);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithmetic_expr ::= expression DECREMENTO 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                     // Check if the operand is of numeric type
                     String type = symbolTable.getType(e.toString(), scopeStack.peek());
                     if (!isNumeric(type)) {
                         handleError("Invalid operand for decrement", e);
                     }
                     RESULT = new ArithmeticExprNode(e, "--", null);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relational_expr ::= expression MENOR expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "<", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relational_expr ::= expression MENOR_IGUAL expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "<=", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relational_expr ::= expression MAYOR expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, ">", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relational_expr ::= expression MAYOR_IGUAL expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in relational operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, ">=", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relational_expr ::= expression IGUAL expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in equality operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "==", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relational_expr ::= expression DIFERENTE expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  // Check if both operands are of compatible types
                  String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                  String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                  if (!type1.equals(type2)) {
                      handleError("Type mismatch in equality operation", e1);
                  }
                  RESULT = new RelationalExprNode(e1, "!=", e2);
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical_expr ::= expression AND expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // Check if both operands are of boolean type
                String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                if (!type1.equals("boolean") || !type2.equals("boolean")) {
                    handleError("Invalid operands for logical operation", e1);
                }
                RESULT = new LogicalExprNode(e1, "&&", e2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logical_expr ::= expression OR expression 
            {
              ASTNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // Check if both operands are of boolean type
                String type1 = symbolTable.getType(e1.toString(), scopeStack.peek());
                String type2 = symbolTable.getType(e2.toString(), scopeStack.peek());
                if (!type1.equals("boolean") || !type2.equals("boolean")) {
                    handleError("Invalid operands for logical operation", e1);
                }
                RESULT = new LogicalExprNode(e1, "||", e2);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logical_expr ::= NOT expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                // Check if the operand is of boolean type
                String type = symbolTable.getType(e.toString(), scopeStack.peek());
                if (!type.equals("boolean")) {
                    handleError("Invalid operand for logical NOT", e);
                }
                RESULT = new LogicalExprNode(e, "!", null);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_expr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$2 ::= 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_statement ::= IF PARENTESIS_ABRE expression PARENTESIS_CIERRA LLAVE_ABRE NT$2 statements LLAVE_CIERRA else_opt 
            {
              ASTNode RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode eo = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 scopeStack.pop();  // Exit the scope
 RESULT = new IfNode(e, s, eo);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$3 ::= 
            {
              ASTNode RESULT =null;

 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_opt ::= ELSE LLAVE_ABRE NT$3 statements LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
 scopeStack.pop();  // Exit the scope
 RESULT = s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_opt ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$4 ::= 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

 scopeStack.push(scopeStack.peek() + 1);  // Enter a new scope

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // while_statement ::= WHILE PARENTESIS_ABRE expression PARENTESIS_CIERRA LLAVE_ABRE NT$4 statements LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
 scopeStack.pop();  // Exit the scope
 RESULT = new WhileNode(e, s);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$5 ::= 
            {
              ASTNode RESULT =null;
 scopeStack.push(scopeStack.peek() + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_statement ::= FOR PARENTESIS_ABRE NT$5 for_initialization FIN_EXPRESION opt_expression FIN_EXPRESION for_update PARENTESIS_CIERRA LLAVE_ABRE statements LLAVE_CIERRA 
            {
              ASTNode RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ASTNode) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ASTNode fi = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ASTNode c = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode fu = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bloqueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bloqueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode bloque = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ForNode(fi, c, fu, bloque);
                scopeStack.pop();
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_initialization ::= var_declaration 
            {
              ASTNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initialization",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_initialization ::= assignment 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initialization",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_initialization ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_initialization",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_update ::= assignment 
            {
              ASTNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode a = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_update ::= arithmetic_expr 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_update ::= 
            {
              ASTNode RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_update",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // io_statement ::= PRINT PARENTESIS_ABRE expression PARENTESIS_CIERRA 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintNode(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // io_statement ::= READ PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                // Check if the variable is declared
                if (!symbolTable.isDeclared(i.toString(), scopeStack.peek())) {
                    handleError("Undeclared variable '" + i.toString() + "'", i);
                }
                RESULT = new ReadNode(i.toString());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // error_nterm ::= ERROR 
            {
              ASTNode RESULT =null;
		 handleError("Error encontrado", null); RESULT = new ErrorNode(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("error_nterm",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
