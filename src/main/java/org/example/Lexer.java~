// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

package org.example;

import java_cup.runtime.*;
import java.util.HashMap;
import org.example.SymbolTable;
import org.example.sym;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\42\0\1\1\13\0\1\2\1\0\12\3\7\0\32\4"+
    "\4\0\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\2\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\23\1\1\0\1\3\42\0\1\4"+
    "\1\5\56\0\1\6\7\0\1\7\3\0\1\10\27\0"+
    "\1\11\3\0\1\12\7\0\1\13\2\0\1\14\3\0"+
    "\1\15\1\16\16\0\1\17\1\20\1\21\4\0\1\22"+
    "\1\23\11\0\1\24\1\25\1\0\1\26\12\0\1\27"+
    "\5\0\1\30\1\31\1\32\2\0\1\33\1\0\1\34"+
    "\1\35\3\0\1\36\1\37\1\40\3\0\1\41\2\0"+
    "\1\42\2\0\1\43\1\44\6\0\1\45\1\46\2\0"+
    "\1\47\1\0\1\50\4\0\1\51\1\52\3\0\1\53"+
    "\1\54\1\0\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\74"+
    "\0\36\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366"+
    "\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\u0456"+
    "\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546"+
    "\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636"+
    "\0\u0654\0\u0672\0\u0690\0\u02b2\0\u02d0\0\u06ae\0\u06cc\0\u06ea"+
    "\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc\0\u07da"+
    "\0\u07f8\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca"+
    "\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c\0\u09ba"+
    "\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa"+
    "\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a"+
    "\0\u0bb8\0\u0bd6\0\u0bf4\0\36\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c"+
    "\0\u0c8a\0\u0ca8\0\u0cc6\0\36\0\u0ce4\0\u0d02\0\u0d20\0\36"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00"+
    "\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\36"+
    "\0\u0ff0\0\u100e\0\u102c\0\36\0\u104a\0\u1068\0\u1086\0\u10a4"+
    "\0\u10c2\0\u10e0\0\u10fe\0\36\0\u111c\0\u113a\0\36\0\u1158"+
    "\0\u1176\0\u1194\0\36\0\36\0\u11b2\0\u11d0\0\u11ee\0\u120c"+
    "\0\u122a\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc"+
    "\0\u131a\0\u1338\0\36\0\36\0\36\0\u1356\0\u1374\0\u1392"+
    "\0\u13b0\0\36\0\36\0\u13ce\0\u13ec\0\u140a\0\u1428\0\u1446"+
    "\0\u1464\0\u1482\0\u14a0\0\u14be\0\36\0\36\0\u14dc\0\36"+
    "\0\u14fa\0\u1518\0\u1536\0\u1554\0\u1572\0\u1590\0\u15ae\0\u15cc"+
    "\0\u15ea\0\u1608\0\36\0\u1626\0\u1644\0\u1662\0\u1680\0\u169e"+
    "\0\36\0\36\0\36\0\u16bc\0\u16da\0\36\0\u16f8\0\36"+
    "\0\u02d0\0\u1716\0\u1734\0\u1752\0\36\0\36\0\36\0\u1770"+
    "\0\u178e\0\u17ac\0\36\0\u17ca\0\u17e8\0\36\0\u1806\0\u1824"+
    "\0\36\0\36\0\u1842\0\u1860\0\u187e\0\u189c\0\u18ba\0\u18d8"+
    "\0\36\0\36\0\u18f6\0\u1914\0\36\0\u1932\0\36\0\u1950"+
    "\0\u196e\0\u198c\0\u19aa\0\36\0\36\0\u19c8\0\u19e6\0\u1a04"+
    "\0\36\0\36\0\u1a22\0\36\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\4\2\36\0\1\30\1\31\34\30\2\0"+
    "\1\32\1\4\36\0\1\33\1\0\23\33\1\34\4\33"+
    "\7\0\1\35\1\0\1\36\32\0\1\37\16\0\1\40"+
    "\26\0\1\41\3\0\1\42\5\0\1\43\35\0\1\44"+
    "\24\0\1\45\1\0\1\46\7\0\1\47\22\0\1\50"+
    "\25\0\1\51\16\0\1\52\16\0\1\53\7\0\1\54"+
    "\40\0\1\55\22\0\1\56\3\0\1\57\3\0\1\60"+
    "\25\0\1\61\13\0\1\62\36\0\1\63\42\0\1\64"+
    "\17\0\1\65\7\0\1\66\34\0\1\67\41\0\1\70"+
    "\27\0\1\71\3\0\1\72\20\0\1\73\32\0\1\74"+
    "\35\0\2\33\1\75\30\33\3\0\2\33\1\75\4\33"+
    "\1\76\23\33\25\0\1\77\41\0\1\100\23\0\1\101"+
    "\40\0\1\102\25\0\1\103\43\0\1\104\4\0\1\105"+
    "\33\0\1\106\24\0\1\107\36\0\1\110\51\0\1\111"+
    "\1\0\1\112\16\0\1\113\44\0\1\114\42\0\1\115"+
    "\25\0\1\116\30\0\1\117\52\0\1\120\36\0\1\121"+
    "\22\0\1\122\10\0\1\123\27\0\1\124\37\0\1\125"+
    "\41\0\1\126\3\0\1\127\14\0\1\130\37\0\1\131"+
    "\41\0\1\132\53\0\1\133\12\0\1\134\46\0\1\135"+
    "\43\0\1\136\34\0\1\137\14\0\1\140\54\0\1\141"+
    "\13\0\2\33\1\75\17\33\1\142\10\33\12\0\1\143"+
    "\41\0\1\144\46\0\1\145\26\0\1\146\42\0\1\147"+
    "\22\0\1\150\52\0\1\151\24\0\1\152\40\0\1\153"+
    "\36\0\1\154\40\0\1\155\26\0\1\156\11\0\1\157"+
    "\32\0\1\160\35\0\1\161\33\0\1\162\33\0\1\163"+
    "\22\0\1\164\56\0\1\165\20\0\1\166\45\0\1\167"+
    "\47\0\1\170\11\0\1\171\53\0\1\172\34\0\1\173"+
    "\26\0\1\174\34\0\1\175\41\0\1\176\26\0\1\177"+
    "\35\0\1\200\45\0\1\201\45\0\1\202\15\0\1\203"+
    "\41\0\1\204\46\0\1\205\24\0\1\206\22\0\2\33"+
    "\1\75\1\207\27\33\10\0\1\210\1\0\1\211\12\0"+
    "\1\212\22\0\1\213\31\0\1\214\45\0\1\215\44\0"+
    "\1\216\37\0\1\217\14\0\1\220\40\0\1\221\35\0"+
    "\1\222\36\0\1\223\31\0\1\224\41\0\1\225\37\0"+
    "\1\226\33\0\1\227\31\0\1\230\37\0\1\231\47\0"+
    "\1\232\40\0\1\233\36\0\1\234\24\0\1\235\47\0"+
    "\1\236\14\0\1\237\40\0\1\240\36\0\1\241\51\0"+
    "\1\242\30\0\1\243\42\0\1\244\26\0\1\245\25\0"+
    "\1\246\47\0\1\247\34\0\1\250\42\0\1\251\32\0"+
    "\1\252\16\0\2\33\1\75\13\33\1\253\14\33\30\0"+
    "\1\254\25\0\1\255\27\0\1\256\44\0\1\257\51\0"+
    "\1\260\26\0\1\261\15\0\1\262\35\0\1\263\51\0"+
    "\1\264\25\0\1\265\37\0\1\266\40\0\1\267\43\0"+
    "\1\270\24\0\1\271\46\0\1\272\25\0\1\273\45\0"+
    "\1\274\20\0\1\275\47\0\1\276\31\0\1\277\25\0"+
    "\1\300\36\0\1\301\45\0\1\302\31\0\1\303\30\0"+
    "\1\304\51\0\1\305\35\0\1\306\25\0\1\307\51\0"+
    "\1\310\12\0\2\33\1\75\14\33\1\311\13\33\12\0"+
    "\1\312\46\0\1\313\26\0\1\314\50\0\1\315\14\0"+
    "\1\316\56\0\1\317\16\0\1\320\1\0\1\321\12\0"+
    "\1\322\16\0\1\323\60\0\1\324\16\0\1\325\31\0"+
    "\1\326\45\0\1\327\25\0\1\330\54\0\1\331\43\0"+
    "\1\332\13\0\1\333\54\0\1\334\13\0\1\335\51\0"+
    "\1\336\32\0\1\337\30\0\1\340\26\0\2\33\1\341"+
    "\30\33\21\0\1\342\22\0\1\343\35\0\1\344\51\0"+
    "\1\345\40\0\1\346\16\0\1\347\57\0\1\350\25\0"+
    "\1\351\27\0\1\352\35\0\1\353\35\0\1\354\42\0"+
    "\1\355\24\0\1\356\47\0\1\357\27\0\1\360\35\0"+
    "\1\361\42\0\1\362\45\0\1\363\32\0\1\364\30\0"+
    "\1\365\30\0\1\366\46\0\1\367\26\0\1\370\42\0"+
    "\1\371\36\0\1\372\22\0\1\373\47\0\1\374\36\0"+
    "\1\375\43\0\1\376\27\0\1\377\34\0\1\u0100\22\0"+
    "\1\u0101\35\0\1\u0102\45\0\1\u0103\25\0\1\u0104\41\0"+
    "\1\u0105\52\0\1\u0106\32\0\1\u0107\30\0\1\u0108\40\0"+
    "\1\u0109\35\0\1\u010a\43\0\1\u010b\27\0\1\u010c\25\0"+
    "\1\u010d\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\0\1\11\42\0\2\1\56\0"+
    "\1\11\7\0\1\11\3\0\1\11\27\0\1\11\3\0"+
    "\1\11\7\0\1\11\2\0\1\11\3\0\2\11\16\0"+
    "\3\11\4\0\2\11\11\0\2\11\1\0\1\11\12\0"+
    "\1\11\5\0\3\11\2\0\1\11\1\0\1\11\1\1"+
    "\3\0\3\11\3\0\1\11\2\0\1\11\2\0\2\11"+
    "\6\0\2\11\2\0\1\11\1\0\1\11\4\0\2\11"+
    "\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Tabla de símbolos
    SymbolTable symbolTable = new SymbolTable();

    // Método para obtener la tabla de símbolos
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error léxico: Carácter no reconocido '" + yytext() +
                       "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
    return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
            }
          // fall through
          case 47: break;
          case 2:
            { symbolTable.addSymbol(yytext(), "LITERAL_ENTERO", yyline, yycolumn, Integer.valueOf(yytext()));
    return new Symbol(sym.LITERAL_ENTERO, yyline, yycolumn, Integer.valueOf(yytext()));
            }
          // fall through
          case 48: break;
          case 3:
            { symbolTable.addSymbol(yytext(), "LITERAL_STRING", yyline, yycolumn, yytext());
    return new Symbol(sym.LITERAL_STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 49: break;
          case 4:
            { symbolTable.addSymbol(yytext(), "LITERAL_FLOTANTE", yyline, yycolumn, Float.valueOf(yytext()));
    return new Symbol(sym.LITERAL_FLOTANTE, yyline, yycolumn, Float.valueOf(yytext()));
            }
          // fall through
          case 50: break;
          case 5:
            { symbolTable.addSymbol(yytext(), "IDENTIFICADOR", yyline, yycolumn, null);
    return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 6:
            { symbolTable.addSymbol(yytext(), "IF", yyline, yycolumn, null);
    return new Symbol(sym.IF, yyline, yycolumn);
            }
          // fall through
          case 52: break;
          case 7:
            { symbolTable.addSymbol(yytext(), "ELSE", yyline, yycolumn, null);
    return new Symbol(sym.ELSE, yyline, yycolumn);
            }
          // fall through
          case 53: break;
          case 8:
            { symbolTable.addSymbol(yytext(), "IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.IGUAL, yyline, yycolumn);
            }
          // fall through
          case 54: break;
          case 9:
            { symbolTable.addSymbol(yytext(), "BREAK", yyline, yycolumn, null);
    return new Symbol(sym.BREAK, yyline, yycolumn);
            }
          // fall through
          case 55: break;
          case 10:
            { symbolTable.addSymbol(yytext(), "RETURN", yyline, yycolumn, null);
    return new Symbol(sym.RETURN, yyline, yycolumn);
            }
          // fall through
          case 56: break;
          case 11:
            { symbolTable.addSymbol(yytext(), "MODULO", yyline, yycolumn, null);
    return new Symbol(sym.MODULO, yyline, yycolumn);
            }
          // fall through
          case 57: break;
          case 12:
            { symbolTable.addSymbol(yytext(), "PRINT", yyline, yycolumn, null);
    return new Symbol(sym.PRINT, yyline, yycolumn);
            }
          // fall through
          case 58: break;
          case 13:
            { symbolTable.addSymbol(yytext(), "INCREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.INCREMENTO, yyline, yycolumn);
            }
          // fall through
          case 59: break;
          case 14:
            { symbolTable.addSymbol(yytext(), "DIVISION", yyline, yycolumn, null);
    return new Symbol(sym.DIVISION, yyline, yycolumn);
            }
          // fall through
          case 60: break;
          case 15:
            { symbolTable.addSymbol(yytext(), "TIPO_STRING", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_STRING, yyline, yycolumn);
            }
          // fall through
          case 61: break;
          case 16:
            { symbolTable.addSymbol(yytext(), "TIPO_CHAR", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_CHAR, yyline, yycolumn);
            }
          // fall through
          case 62: break;
          case 17:
            { symbolTable.addSymbol(yytext(), "FOR", yyline, yycolumn, null);
    return new Symbol(sym.FOR, yyline, yycolumn);
            }
          // fall through
          case 63: break;
          case 18:
            { symbolTable.addSymbol(yytext(), "OR", yyline, yycolumn, null);
    return new Symbol(sym.OR, yyline, yycolumn);
            }
          // fall through
          case 64: break;
          case 19:
            { symbolTable.addSymbol(yytext(), "DECREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.DECREMENTO, yyline, yycolumn);
            }
          // fall through
          case 65: break;
          case 20:
            { symbolTable.addSymbol(yytext(), "TIPO_BOOLEANO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_BOOLEANO, yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 21:
            { symbolTable.addSymbol(yytext(), "DEFAULT", yyline, yycolumn, null);
    return new Symbol(sym.DEFAULT, yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 22:
            { symbolTable.addSymbol(yytext(), "SWITCH", yyline, yycolumn, null);
    return new Symbol(sym.SWITCH, yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 23:
            { symbolTable.addSymbol(yytext(), "ASIGNACION", yyline, yycolumn, null);
    return new Symbol(sym.ASIGNACION, yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 24:
            { symbolTable.addSymbol(yytext(), "AND", yyline, yycolumn, null);
    return new Symbol(sym.AND, yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 25:
            { symbolTable.addSymbol(yytext(), "MAYOR", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR, yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 26:
            { symbolTable.addSymbol(yytext(), "SUMA", yyline, yycolumn, null);
    return new Symbol(sym.SUMA, yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 27:
            { symbolTable.addSymbol(yytext(), "TIPO_ENTERO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_ENTERO, yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 28:
            { symbolTable.addSymbol(yytext(), "MAYOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 29:
            { symbolTable.addSymbol(yytext(), "MAIN", yyline, yycolumn, null);
    return new Symbol(sym.IF, yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 30:
            { symbolTable.addSymbol(yytext(), "POTENCIA", yyline, yycolumn, null);
    return new Symbol(sym.POTENCIA, yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 31:
            { symbolTable.addSymbol(yytext(), "NOT", yyline, yycolumn, null);
    return new Symbol(sym.NOT, yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 32:
            { symbolTable.addSymbol(yytext(), "TIPO_FLOTANTE", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_FLOTANTE, yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 33:
            { symbolTable.addSymbol(yytext(), "WHILE", yyline, yycolumn, null);
    return new Symbol(sym.WHILE, yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 34:
            { symbolTable.addSymbol(yytext(), "CASE", yyline, yycolumn, null);
    return new Symbol(sym.CASE, yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 35:
            { symbolTable.addSymbol(yytext(), "DIFERENTE", yyline, yycolumn, null);
    return new Symbol(sym.DIFERENTE, yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 36:
            { symbolTable.addSymbol(yytext(), "MENOR", yyline, yycolumn, null);
    return new Symbol(sym.MENOR, yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 37:
            { symbolTable.addSymbol(yytext(), "MENOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 38:
            { symbolTable.addSymbol(yytext(), "FIN_EXPRESION", yyline, yycolumn, null);
    return new Symbol(sym.FIN_EXPRESION, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 39:
            { symbolTable.addSymbol(yytext(), "LLAVE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 40:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 41:
            { symbolTable.addSymbol(yytext(), "MULTIPLICACION", yyline, yycolumn, null);
    return new Symbol(sym.MULTIPLICACION, yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 42:
            { symbolTable.addSymbol(yytext(), "CORCHETE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_ABRE, yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 43:
            { symbolTable.addSymbol(yytext(), "RESTA", yyline, yycolumn, null);
    return new Symbol(sym.RESTA, yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 44:
            { symbolTable.addSymbol(yytext(), "LLAVE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 45:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 46:
            { symbolTable.addSymbol(yytext(), "CORCHETE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_CIERRA, yyline, yycolumn);
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
