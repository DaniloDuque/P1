// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

package org.example;

import java_cup.runtime.*;
import java.util.HashMap;
import org.example.SymbolTable;
import org.example.sym;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\22\0"+
    "\1\2\1\0\1\7\4\0\1\10\4\0\1\11\1\12"+
    "\1\13\1\14\1\15\11\16\6\0\1\17\32\20\1\0"+
    "\1\21\2\0\1\22\1\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\20\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\12\0\1\4\u01a2\0"+
    "\2\4\326\0\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\2\1\1\3\25\1\1\0\2\4"+
    "\1\0\1\5\1\0\1\6\51\0\1\7\47\0\1\10"+
    "\12\0\1\11\11\0\1\12\3\0\1\13\13\0\1\14"+
    "\14\0\1\15\3\0\1\16\3\0\1\14\5\0\1\17"+
    "\2\0\1\20\3\0\1\21\1\22\1\0\1\23\15\0"+
    "\1\24\1\25\1\26\5\0\1\27\1\30\11\0\1\31"+
    "\1\32\1\0\1\33\12\0\1\34\1\0\1\35\4\0"+
    "\1\36\1\37\1\40\2\0\1\41\1\0\1\42\1\43"+
    "\3\0\1\44\1\45\1\46\3\0\1\47\2\0\1\50"+
    "\2\0\1\51\1\52\6\0\1\53\1\54\2\0\1\55"+
    "\1\0\1\56\4\0\1\57\1\60\3\0\1\61\1\62"+
    "\1\0\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\53\0\201\0\254\0\53\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\201"+
    "\0\53\0\254\0\53\0\327\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810"+
    "\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\53\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u0b16\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\53"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\53\0\u1555\0\u1580\0\u15ab\0\53\0\u15d6\0\u1601"+
    "\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3\0\53\0\u19de"+
    "\0\u1a09\0\u1a34\0\53\0\u1a5f\0\u1a8a\0\u1ab5\0\53\0\u1ae0"+
    "\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\53\0\u1bb7\0\u1be2\0\53"+
    "\0\u1c0d\0\u1c38\0\u1c63\0\53\0\53\0\u1c8e\0\53\0\u1cb9"+
    "\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11"+
    "\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\53\0\53\0\53\0\u1ee8"+
    "\0\u1f13\0\u1f3e\0\u1f69\0\u1f94\0\53\0\53\0\u1fbf\0\u1fea"+
    "\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\53"+
    "\0\53\0\u2142\0\53\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219"+
    "\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\53\0\u231b\0\53"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\53\0\53\0\53\0\u23f2"+
    "\0\u241d\0\53\0\u2448\0\53\0\53\0\u2473\0\u249e\0\u24c9"+
    "\0\53\0\53\0\53\0\u24f4\0\u251f\0\u254a\0\53\0\u2575"+
    "\0\u25a0\0\53\0\u25cb\0\u25f6\0\53\0\53\0\u2621\0\u264c"+
    "\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\53\0\53\0\u2723\0\u274e"+
    "\0\53\0\u2779\0\53\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\53"+
    "\0\53\0\u2850\0\u287b\0\u28a6\0\53\0\53\0\u28d1\0\53"+
    "\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\2\2\4\1\5\1\6\1\7"+
    "\5\2\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\1\2\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\4\2\65\0\1\35\2\0\1\36\1\37\34\0"+
    "\7\40\1\41\43\40\3\42\1\0\2\42\1\0\1\42"+
    "\1\43\10\42\1\0\31\42\3\44\1\4\3\0\44\44"+
    "\22\0\1\45\50\0\1\46\2\0\23\46\1\47\4\46"+
    "\24\0\1\50\1\0\1\51\47\0\1\52\16\0\1\53"+
    "\43\0\1\54\3\0\1\55\5\0\1\56\52\0\1\57"+
    "\41\0\1\60\1\0\1\61\4\0\1\62\2\0\1\63"+
    "\27\0\1\64\7\0\1\65\42\0\1\66\16\0\1\67"+
    "\33\0\1\70\7\0\1\71\55\0\1\72\37\0\1\73"+
    "\3\0\1\74\3\0\1\75\42\0\1\76\13\0\1\77"+
    "\53\0\1\100\57\0\1\101\34\0\1\102\7\0\1\103"+
    "\46\0\1\104\2\0\1\105\56\0\1\106\44\0\1\107"+
    "\3\0\1\110\35\0\1\111\44\0\1\36\1\37\47\0"+
    "\1\112\52\0\1\112\1\0\2\37\34\0\21\45\1\113"+
    "\1\114\30\45\15\0\2\46\1\0\1\46\1\0\1\115"+
    "\30\46\15\0\2\46\1\0\1\46\1\0\1\115\4\46"+
    "\1\116\23\46\42\0\1\117\56\0\1\120\40\0\1\121"+
    "\55\0\1\122\42\0\1\123\60\0\1\124\4\0\1\125"+
    "\50\0\1\126\41\0\1\127\53\0\1\130\66\0\1\131"+
    "\1\0\1\132\31\0\1\133\54\0\1\134\57\0\1\135"+
    "\54\0\1\136\57\0\1\137\42\0\1\140\45\0\1\141"+
    "\67\0\1\142\53\0\1\143\37\0\1\144\10\0\1\145"+
    "\44\0\1\146\54\0\1\147\56\0\1\150\3\0\1\151"+
    "\31\0\1\152\54\0\1\153\56\0\1\154\70\0\1\155"+
    "\27\0\1\156\55\0\1\157\60\0\1\160\60\0\1\161"+
    "\51\0\1\162\31\0\1\163\71\0\1\164\25\0\2\165"+
    "\72\0\1\45\3\0\1\45\24\0\1\4\53\0\2\46"+
    "\1\0\1\46\1\0\1\115\17\46\1\166\10\46\27\0"+
    "\1\167\56\0\1\170\63\0\1\171\43\0\1\172\57\0"+
    "\1\173\37\0\1\174\67\0\1\175\41\0\1\176\55\0"+
    "\1\177\53\0\1\200\55\0\1\201\43\0\1\202\11\0"+
    "\1\203\52\0\1\204\47\0\1\205\53\0\1\206\51\0"+
    "\1\207\50\0\1\210\50\0\1\211\37\0\1\212\73\0"+
    "\1\213\35\0\1\214\62\0\1\215\64\0\1\216\26\0"+
    "\1\217\70\0\1\220\51\0\1\221\43\0\1\222\51\0"+
    "\1\223\56\0\1\224\43\0\1\225\52\0\1\226\62\0"+
    "\1\227\60\0\1\230\54\0\1\231\32\0\1\232\56\0"+
    "\1\233\63\0\1\234\41\0\1\235\34\0\2\46\1\0"+
    "\1\46\1\0\1\115\1\236\27\46\25\0\1\237\1\0"+
    "\1\240\12\0\1\241\37\0\1\242\46\0\1\243\62\0"+
    "\1\244\61\0\1\245\54\0\1\246\31\0\1\247\55\0"+
    "\1\250\52\0\1\251\53\0\1\252\46\0\1\253\56\0"+
    "\1\254\50\0\1\255\56\0\1\256\50\0\1\257\52\0"+
    "\1\260\46\0\1\261\54\0\1\262\64\0\1\263\55\0"+
    "\1\264\53\0\1\265\41\0\1\266\64\0\1\267\31\0"+
    "\1\270\55\0\1\271\53\0\1\272\66\0\1\273\45\0"+
    "\1\274\57\0\1\275\43\0\1\276\45\0\1\277\47\0"+
    "\1\300\64\0\1\301\51\0\1\302\57\0\1\303\47\0"+
    "\1\304\30\0\2\46\1\0\1\46\1\0\1\115\13\46"+
    "\1\305\14\46\45\0\1\306\42\0\1\307\44\0\1\310"+
    "\61\0\1\311\66\0\1\312\43\0\1\313\32\0\1\314"+
    "\52\0\1\315\66\0\1\316\42\0\1\317\54\0\1\320"+
    "\55\0\1\321\50\0\1\322\62\0\1\323\41\0\1\324"+
    "\63\0\1\325\42\0\1\326\62\0\1\327\35\0\1\330"+
    "\64\0\1\331\46\0\1\332\42\0\1\333\53\0\1\334"+
    "\62\0\1\335\46\0\1\336\45\0\1\337\66\0\1\340"+
    "\52\0\1\341\42\0\1\342\66\0\1\343\24\0\2\46"+
    "\1\0\1\46\1\0\1\115\14\46\1\344\13\46\27\0"+
    "\1\345\63\0\1\346\43\0\1\347\65\0\1\350\31\0"+
    "\1\351\73\0\1\352\33\0\1\353\1\0\1\354\12\0"+
    "\1\355\33\0\1\356\75\0\1\357\27\0\1\360\56\0"+
    "\1\361\46\0\1\362\62\0\1\363\42\0\1\364\71\0"+
    "\1\365\60\0\1\366\30\0\1\367\71\0\1\370\30\0"+
    "\1\371\66\0\1\372\47\0\1\373\45\0\1\374\40\0"+
    "\2\46\1\0\1\46\1\0\1\375\30\46\36\0\1\376"+
    "\37\0\1\377\52\0\1\u0100\66\0\1\u0101\55\0\1\u0102"+
    "\33\0\1\u0103\74\0\1\u0104\42\0\1\u0105\44\0\1\u0106"+
    "\52\0\1\u0107\52\0\1\u0108\57\0\1\u0109\41\0\1\u010a"+
    "\64\0\1\u010b\44\0\1\u010c\52\0\1\u010d\57\0\1\u010e"+
    "\62\0\1\u010f\47\0\1\u0110\45\0\1\u0111\45\0\1\u0112"+
    "\63\0\1\u0113\43\0\1\u0114\57\0\1\u0115\53\0\1\u0116"+
    "\37\0\1\u0117\64\0\1\u0118\53\0\1\u0119\60\0\1\u011a"+
    "\44\0\1\u011b\51\0\1\u011c\37\0\1\u011d\52\0\1\u011e"+
    "\62\0\1\u011f\42\0\1\u0120\56\0\1\u0121\67\0\1\u0122"+
    "\47\0\1\u0123\45\0\1\u0124\55\0\1\u0125\52\0\1\u0126"+
    "\60\0\1\u0127\44\0\1\u0128\42\0\1\u0129\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10492];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\25\1\1\0"+
    "\2\1\1\0\1\11\1\0\1\11\51\0\1\11\47\0"+
    "\1\1\12\0\1\11\11\0\1\11\3\0\1\11\13\0"+
    "\1\1\14\0\1\11\3\0\1\11\3\0\1\11\5\0"+
    "\1\11\2\0\1\11\3\0\2\11\1\0\1\11\15\0"+
    "\3\11\5\0\2\11\11\0\2\11\1\0\1\11\12\0"+
    "\1\11\1\0\1\11\4\0\3\11\2\0\1\11\1\0"+
    "\2\11\3\0\3\11\3\0\1\11\2\0\1\11\2\0"+
    "\2\11\6\0\2\11\2\0\1\11\1\0\1\11\4\0"+
    "\2\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Tabla de símbolos
    SymbolTable symbolTable = new SymbolTable();

    // Método para obtener la tabla de símbolos
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error léxico: Carácter no reconocido '" + yytext() +
                       "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
    return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 2:
            { /* No token, just consume the comment */
            }
          // fall through
          case 54: break;
          case 3:
            { symbolTable.addSymbol(yytext(), "COMA", yyline, yycolumn, null);
        return new Symbol(sym.COMA, yyline, yycolumn);
            }
          // fall through
          case 55: break;
          case 4:
            { symbolTable.addSymbol(yytext(), "LITERAL_ENTERO", yyline, yycolumn, Integer.valueOf(yytext()));
    return new Symbol(sym.LITERAL_ENTERO, yyline, yycolumn, Integer.valueOf(yytext()));
            }
          // fall through
          case 56: break;
          case 5:
            { symbolTable.addSymbol(yytext(), "LITERAL_STRING", yyline, yycolumn, yytext());
    return new Symbol(sym.LITERAL_STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 6:
            { symbolTable.addSymbol(yytext(), "LITERAL_CHAR", yyline, yycolumn, null);
   return new Symbol(sym.LITERAL_CHAR, yyline, yycolumn);
            }
          // fall through
          case 58: break;
          case 7:
            { symbolTable.addSymbol(yytext(), "IDENTIFICADOR", yyline, yycolumn, null);
    return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 8:
            { symbolTable.addSymbol(yytext(), "LITERAL_FLOTANTE", yyline, yycolumn, Float.valueOf(yytext()));
    return new Symbol(sym.LITERAL_FLOTANTE, yyline, yycolumn, Float.valueOf(yytext()));
            }
          // fall through
          case 60: break;
          case 9:
            { symbolTable.addSymbol(yytext(), "IF", yyline, yycolumn, null);
    return new Symbol(sym.IF, yyline, yycolumn);
            }
          // fall through
          case 61: break;
          case 10:
            { symbolTable.addSymbol(yytext(), "ELSE", yyline, yycolumn, null);
    return new Symbol(sym.ELSE, yyline, yycolumn);
            }
          // fall through
          case 62: break;
          case 11:
            { symbolTable.addSymbol(yytext(), "IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.IGUAL, yyline, yycolumn);
            }
          // fall through
          case 63: break;
          case 12:
            { symbolTable.addSymbol(yytext(), "LITERAL_BOOLEANO", yyline, yycolumn, null);
    return new Symbol(sym.LITERAL_BOOLEANO, yyline, yycolumn);
            }
          // fall through
          case 64: break;
          case 13:
            { symbolTable.addSymbol(yytext(), "BREAK", yyline, yycolumn, null);
    return new Symbol(sym.BREAK, yyline, yycolumn);
            }
          // fall through
          case 65: break;
          case 14:
            { symbolTable.addSymbol(yytext(), "RETURN", yyline, yycolumn, null);
    return new Symbol(sym.RETURN, yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 15:
            { symbolTable.addSymbol(yytext(), "MODULO", yyline, yycolumn, null);
    return new Symbol(sym.MODULO, yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 16:
            { symbolTable.addSymbol(yytext(), "PRINT", yyline, yycolumn, null);
    return new Symbol(sym.PRINT, yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 17:
            { symbolTable.addSymbol(yytext(), "INCREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.INCREMENTO, yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 18:
            { symbolTable.addSymbol(yytext(), "DIVISION", yyline, yycolumn, null);
    return new Symbol(sym.DIVISION, yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 19:
            { symbolTable.addSymbol(yytext(), "DOS_PUNTOS", yyline, yycolumn, null);
    return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 20:
            { symbolTable.addSymbol(yytext(), "TIPO_STRING", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_STRING, yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 21:
            { symbolTable.addSymbol(yytext(), "TIPO_CHAR", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_CHAR, yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 22:
            { symbolTable.addSymbol(yytext(), "FOR", yyline, yycolumn, null);
    return new Symbol(sym.FOR, yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 23:
            { symbolTable.addSymbol(yytext(), "OR", yyline, yycolumn, null);
    return new Symbol(sym.OR, yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 24:
            { symbolTable.addSymbol(yytext(), "DECREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.DECREMENTO, yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 25:
            { symbolTable.addSymbol(yytext(), "TIPO_BOOLEANO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_BOOLEANO, yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 26:
            { symbolTable.addSymbol(yytext(), "DEFAULT", yyline, yycolumn, null);
    return new Symbol(sym.DEFAULT, yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 27:
            { symbolTable.addSymbol(yytext(), "SWITCH", yyline, yycolumn, null);
    return new Symbol(sym.SWITCH, yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 28:
            { symbolTable.addSymbol(yytext(), "ASIGNACION", yyline, yycolumn, null);
    return new Symbol(sym.ASIGNACION, yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 29:
            { symbolTable.addSymbol(yytext(), "READ", yyline, yycolumn, null);
    return new Symbol(sym.READ, yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 30:
            { symbolTable.addSymbol(yytext(), "AND", yyline, yycolumn, null);
    return new Symbol(sym.AND, yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 31:
            { symbolTable.addSymbol(yytext(), "MAYOR", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR, yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 32:
            { symbolTable.addSymbol(yytext(), "SUMA", yyline, yycolumn, null);
    return new Symbol(sym.SUMA, yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 33:
            { symbolTable.addSymbol(yytext(), "TIPO_ENTERO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_ENTERO, yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 34:
            { symbolTable.addSymbol(yytext(), "MAYOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 86: break;
          case 35:
            { symbolTable.addSymbol(yytext(), "MAIN", yyline, yycolumn, null);
    return new Symbol(sym.MAIN, yyline, yycolumn);
            }
          // fall through
          case 87: break;
          case 36:
            { symbolTable.addSymbol(yytext(), "POTENCIA", yyline, yycolumn, null);
    return new Symbol(sym.POTENCIA, yyline, yycolumn);
            }
          // fall through
          case 88: break;
          case 37:
            { symbolTable.addSymbol(yytext(), "NOT", yyline, yycolumn, null);
    return new Symbol(sym.NOT, yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 38:
            { symbolTable.addSymbol(yytext(), "TIPO_FLOTANTE", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_FLOTANTE, yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 39:
            { symbolTable.addSymbol(yytext(), "WHILE", yyline, yycolumn, null);
    return new Symbol(sym.WHILE, yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 40:
            { symbolTable.addSymbol(yytext(), "CASE", yyline, yycolumn, null);
    return new Symbol(sym.CASE, yyline, yycolumn);
            }
          // fall through
          case 92: break;
          case 41:
            { symbolTable.addSymbol(yytext(), "DIFERENTE", yyline, yycolumn, null);
    return new Symbol(sym.DIFERENTE, yyline, yycolumn);
            }
          // fall through
          case 93: break;
          case 42:
            { symbolTable.addSymbol(yytext(), "MENOR", yyline, yycolumn, null);
    return new Symbol(sym.MENOR, yyline, yycolumn);
            }
          // fall through
          case 94: break;
          case 43:
            { symbolTable.addSymbol(yytext(), "MENOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 95: break;
          case 44:
            { symbolTable.addSymbol(yytext(), "FIN_EXPRESION", yyline, yycolumn, null);
    return new Symbol(sym.FIN_EXPRESION, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 45:
            { symbolTable.addSymbol(yytext(), "LLAVE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 46:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 47:
            { symbolTable.addSymbol(yytext(), "MULTIPLICACION", yyline, yycolumn, null);
    return new Symbol(sym.MULTIPLICACION, yyline, yycolumn);
            }
          // fall through
          case 99: break;
          case 48:
            { symbolTable.addSymbol(yytext(), "CORCHETE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_ABRE, yyline, yycolumn);
            }
          // fall through
          case 100: break;
          case 49:
            { symbolTable.addSymbol(yytext(), "RESTA", yyline, yycolumn, null);
    return new Symbol(sym.RESTA, yyline, yycolumn);
            }
          // fall through
          case 101: break;
          case 50:
            { symbolTable.addSymbol(yytext(), "LLAVE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 51:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 52:
            { symbolTable.addSymbol(yytext(), "CORCHETE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_CIERRA, yyline, yycolumn);
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
