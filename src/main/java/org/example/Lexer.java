// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/org/example/lexer.flex

package org.example;

import java_cup.runtime.*;
import java.util.HashMap;
import org.example.SymbolTable;
import org.example.sym;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\4\22\0\1\1\1\0"+
    "\1\5\13\0\1\6\1\7\12\10\6\0\1\11\32\12"+
    "\1\0\1\13\2\0\1\14\1\0\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\12\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\12\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\25\1\1\0\1\4"+
    "\44\0\1\5\1\0\1\6\44\0\1\2\12\0\1\7"+
    "\7\0\1\10\3\0\1\11\27\0\1\12\3\0\1\13"+
    "\7\0\1\14\2\0\1\15\3\0\1\16\1\17\16\0"+
    "\1\20\1\21\1\22\4\0\1\23\1\24\11\0\1\25"+
    "\1\26\1\0\1\27\12\0\1\30\5\0\1\31\1\32"+
    "\1\33\2\0\1\34\1\0\1\35\1\36\3\0\1\37"+
    "\1\40\1\41\3\0\1\42\2\0\1\43\2\0\1\44"+
    "\1\45\6\0\1\46\1\47\2\0\1\50\1\0\1\51"+
    "\4\0\1\52\1\53\3\0\1\54\1\55\1\0\1\56"+
    "\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\45\0\112\0\157\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\112\0\45\0\u039d\0\224\0\u03c2\0\u03e7"+
    "\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f"+
    "\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f"+
    "\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887"+
    "\0\u039d\0\u08ac\0\u03e7\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965"+
    "\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d"+
    "\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5"+
    "\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd"+
    "\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u03c2"+
    "\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08"+
    "\0\u0f2d\0\u0f52\0\45\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b"+
    "\0\u1030\0\u1055\0\45\0\u107a\0\u109f\0\u10c4\0\45\0\u10e9"+
    "\0\u110e\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211"+
    "\0\u1236\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339"+
    "\0\u135e\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\45\0\u143c"+
    "\0\u1461\0\u1486\0\45\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f"+
    "\0\u1564\0\u1589\0\45\0\u15ae\0\u15d3\0\45\0\u15f8\0\u161d"+
    "\0\u1642\0\45\0\45\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb"+
    "\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823"+
    "\0\u1848\0\45\0\45\0\45\0\u186d\0\u1892\0\u18b7\0\u18dc"+
    "\0\45\0\45\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba"+
    "\0\u19df\0\u1a04\0\u1a29\0\45\0\45\0\u1a4e\0\45\0\u1a73"+
    "\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b"+
    "\0\u1bc0\0\45\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\45"+
    "\0\45\0\45\0\u1c9e\0\u1cc3\0\45\0\u1ce8\0\45\0\u03e7"+
    "\0\u1d0d\0\u1d32\0\u1d57\0\45\0\45\0\45\0\u1d7c\0\u1da1"+
    "\0\u1dc6\0\45\0\u1deb\0\u1e10\0\45\0\u1e35\0\u1e5a\0\45"+
    "\0\45\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\u1f38\0\45"+
    "\0\45\0\u1f5d\0\u1f82\0\45\0\u1fa7\0\45\0\u1fcc\0\u1ff1"+
    "\0\u2016\0\u203b\0\45\0\45\0\u2060\0\u2085\0\u20aa\0\45"+
    "\0\45\0\u20cf\0\45\0\45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\2\2\1\5\1\6"+
    "\1\2\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\2\1\22\1\23\1\24"+
    "\1\2\1\25\1\26\1\27\1\30\1\31\1\32\4\2"+
    "\45\0\5\33\1\34\37\33\6\0\1\35\1\0\1\5"+
    "\34\0\2\36\1\3\2\0\40\36\14\0\1\37\42\0"+
    "\1\40\2\0\23\40\1\41\4\40\16\0\1\42\1\0"+
    "\1\43\41\0\1\44\16\0\1\45\35\0\1\46\3\0"+
    "\1\47\5\0\1\50\44\0\1\51\33\0\1\52\1\0"+
    "\1\53\7\0\1\54\31\0\1\55\34\0\1\56\16\0"+
    "\1\57\25\0\1\60\7\0\1\61\47\0\1\62\31\0"+
    "\1\63\3\0\1\64\3\0\1\65\34\0\1\66\13\0"+
    "\1\67\45\0\1\70\51\0\1\71\26\0\1\72\7\0"+
    "\1\73\43\0\1\74\50\0\1\75\36\0\1\76\3\0"+
    "\1\77\27\0\1\100\37\0\1\101\34\0\2\37\3\0"+
    "\7\37\1\102\30\37\10\0\1\40\1\0\1\40\1\0"+
    "\1\103\30\40\10\0\1\40\1\0\1\40\1\0\1\103"+
    "\4\40\1\104\23\40\34\0\1\105\50\0\1\106\32\0"+
    "\1\107\47\0\1\110\34\0\1\111\52\0\1\112\4\0"+
    "\1\113\42\0\1\114\33\0\1\115\45\0\1\116\60\0"+
    "\1\117\1\0\1\120\25\0\1\121\53\0\1\122\51\0"+
    "\1\123\34\0\1\124\37\0\1\125\61\0\1\126\45\0"+
    "\1\127\31\0\1\130\10\0\1\131\36\0\1\132\46\0"+
    "\1\133\50\0\1\134\3\0\1\135\23\0\1\136\46\0"+
    "\1\137\50\0\1\140\62\0\1\141\21\0\1\142\55\0"+
    "\1\143\52\0\1\144\43\0\1\145\23\0\1\146\63\0"+
    "\1\147\10\0\2\37\3\0\2\37\1\150\4\37\1\102"+
    "\30\37\10\0\1\40\1\0\1\40\1\0\1\103\17\40"+
    "\1\151\10\40\21\0\1\152\50\0\1\153\55\0\1\154"+
    "\35\0\1\155\51\0\1\156\31\0\1\157\61\0\1\160"+
    "\33\0\1\161\47\0\1\162\45\0\1\163\47\0\1\164"+
    "\35\0\1\165\11\0\1\166\41\0\1\167\44\0\1\170"+
    "\42\0\1\171\42\0\1\172\31\0\1\173\65\0\1\174"+
    "\27\0\1\175\54\0\1\176\56\0\1\177\20\0\1\200"+
    "\62\0\1\201\43\0\1\202\35\0\1\203\43\0\1\204"+
    "\50\0\1\205\35\0\1\206\44\0\1\207\54\0\1\210"+
    "\54\0\1\211\24\0\1\212\50\0\1\213\55\0\1\214"+
    "\33\0\1\215\27\0\1\40\1\0\1\40\1\0\1\103"+
    "\1\216\27\40\17\0\1\217\1\0\1\220\12\0\1\221"+
    "\31\0\1\222\40\0\1\223\54\0\1\224\53\0\1\225"+
    "\46\0\1\226\23\0\1\227\47\0\1\230\44\0\1\231"+
    "\45\0\1\232\40\0\1\233\50\0\1\234\46\0\1\235"+
    "\42\0\1\236\40\0\1\237\46\0\1\240\56\0\1\241"+
    "\47\0\1\242\45\0\1\243\33\0\1\244\56\0\1\245"+
    "\23\0\1\246\47\0\1\247\45\0\1\250\60\0\1\251"+
    "\37\0\1\252\51\0\1\253\35\0\1\254\34\0\1\255"+
    "\56\0\1\256\43\0\1\257\51\0\1\260\41\0\1\261"+
    "\23\0\1\40\1\0\1\40\1\0\1\103\13\40\1\262"+
    "\14\40\37\0\1\263\34\0\1\264\36\0\1\265\53\0"+
    "\1\266\60\0\1\267\35\0\1\270\24\0\1\271\44\0"+
    "\1\272\60\0\1\273\34\0\1\274\46\0\1\275\47\0"+
    "\1\276\52\0\1\277\33\0\1\300\55\0\1\301\34\0"+
    "\1\302\54\0\1\303\27\0\1\304\56\0\1\305\40\0"+
    "\1\306\34\0\1\307\45\0\1\310\54\0\1\311\40\0"+
    "\1\312\37\0\1\313\60\0\1\314\44\0\1\315\34\0"+
    "\1\316\60\0\1\317\17\0\1\40\1\0\1\40\1\0"+
    "\1\103\14\40\1\320\13\40\21\0\1\321\55\0\1\322"+
    "\35\0\1\323\57\0\1\324\23\0\1\325\65\0\1\326"+
    "\25\0\1\327\1\0\1\330\12\0\1\331\25\0\1\332"+
    "\67\0\1\333\25\0\1\334\40\0\1\335\54\0\1\336"+
    "\34\0\1\337\63\0\1\340\52\0\1\341\22\0\1\342"+
    "\63\0\1\343\22\0\1\344\60\0\1\345\41\0\1\346"+
    "\37\0\1\347\33\0\1\40\1\0\1\40\1\0\1\350"+
    "\30\40\30\0\1\351\31\0\1\352\44\0\1\353\60\0"+
    "\1\354\47\0\1\355\25\0\1\356\66\0\1\357\34\0"+
    "\1\360\36\0\1\361\44\0\1\362\44\0\1\363\51\0"+
    "\1\364\33\0\1\365\56\0\1\366\36\0\1\367\44\0"+
    "\1\370\51\0\1\371\54\0\1\372\41\0\1\373\37\0"+
    "\1\374\37\0\1\375\55\0\1\376\35\0\1\377\51\0"+
    "\1\u0100\45\0\1\u0101\31\0\1\u0102\56\0\1\u0103\45\0"+
    "\1\u0104\52\0\1\u0105\36\0\1\u0106\43\0\1\u0107\31\0"+
    "\1\u0108\44\0\1\u0109\54\0\1\u010a\34\0\1\u010b\50\0"+
    "\1\u010c\61\0\1\u010d\41\0\1\u010e\37\0\1\u010f\47\0"+
    "\1\u0110\44\0\1\u0111\52\0\1\u0112\36\0\1\u0113\34\0"+
    "\1\u0114\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8436];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\27\1\1\0\1\11\44\0\1\1\1\0"+
    "\1\1\44\0\1\1\12\0\1\11\7\0\1\11\3\0"+
    "\1\11\27\0\1\11\3\0\1\11\7\0\1\11\2\0"+
    "\1\11\3\0\2\11\16\0\3\11\4\0\2\11\11\0"+
    "\2\11\1\0\1\11\12\0\1\11\5\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\1\3\0\3\11\3\0\1\11"+
    "\2\0\1\11\2\0\2\11\6\0\2\11\2\0\1\11"+
    "\1\0\1\11\4\0\2\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    // Tabla de símbolos
    SymbolTable symbolTable = new SymbolTable();

    // Método para obtener la tabla de símbolos
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error léxico: Carácter no reconocido '" + yytext() +
                       "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
    return new Symbol(sym.ERROR, yyline, yycolumn, yytext());
            }
          // fall through
          case 48: break;
          case 2:
            { /* No token, just consume the comment */
            }
          // fall through
          case 49: break;
          case 3:
            { symbolTable.addSymbol(yytext(), "LITERAL_ENTERO", yyline, yycolumn, Integer.valueOf(yytext()));
    return new Symbol(sym.LITERAL_ENTERO, yyline, yycolumn, Integer.valueOf(yytext()));
            }
          // fall through
          case 50: break;
          case 4:
            { symbolTable.addSymbol(yytext(), "LITERAL_STRING", yyline, yycolumn, yytext());
    return new Symbol(sym.LITERAL_STRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 5:
            { symbolTable.addSymbol(yytext(), "LITERAL_FLOTANTE", yyline, yycolumn, Float.valueOf(yytext()));
    return new Symbol(sym.LITERAL_FLOTANTE, yyline, yycolumn, Float.valueOf(yytext()));
            }
          // fall through
          case 52: break;
          case 6:
            { symbolTable.addSymbol(yytext(), "IDENTIFICADOR", yyline, yycolumn, null);
    return new Symbol(sym.IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 7:
            { symbolTable.addSymbol(yytext(), "IF", yyline, yycolumn, null);
    return new Symbol(sym.IF, yyline, yycolumn);
            }
          // fall through
          case 54: break;
          case 8:
            { symbolTable.addSymbol(yytext(), "ELSE", yyline, yycolumn, null);
    return new Symbol(sym.ELSE, yyline, yycolumn);
            }
          // fall through
          case 55: break;
          case 9:
            { symbolTable.addSymbol(yytext(), "IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.IGUAL, yyline, yycolumn);
            }
          // fall through
          case 56: break;
          case 10:
            { symbolTable.addSymbol(yytext(), "BREAK", yyline, yycolumn, null);
    return new Symbol(sym.BREAK, yyline, yycolumn);
            }
          // fall through
          case 57: break;
          case 11:
            { symbolTable.addSymbol(yytext(), "RETURN", yyline, yycolumn, null);
    return new Symbol(sym.RETURN, yyline, yycolumn);
            }
          // fall through
          case 58: break;
          case 12:
            { symbolTable.addSymbol(yytext(), "MODULO", yyline, yycolumn, null);
    return new Symbol(sym.MODULO, yyline, yycolumn);
            }
          // fall through
          case 59: break;
          case 13:
            { symbolTable.addSymbol(yytext(), "PRINT", yyline, yycolumn, null);
    return new Symbol(sym.PRINT, yyline, yycolumn);
            }
          // fall through
          case 60: break;
          case 14:
            { symbolTable.addSymbol(yytext(), "INCREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.INCREMENTO, yyline, yycolumn);
            }
          // fall through
          case 61: break;
          case 15:
            { symbolTable.addSymbol(yytext(), "DIVISION", yyline, yycolumn, null);
    return new Symbol(sym.DIVISION, yyline, yycolumn);
            }
          // fall through
          case 62: break;
          case 16:
            { symbolTable.addSymbol(yytext(), "TIPO_STRING", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_STRING, yyline, yycolumn);
            }
          // fall through
          case 63: break;
          case 17:
            { symbolTable.addSymbol(yytext(), "TIPO_CHAR", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_CHAR, yyline, yycolumn);
            }
          // fall through
          case 64: break;
          case 18:
            { symbolTable.addSymbol(yytext(), "FOR", yyline, yycolumn, null);
    return new Symbol(sym.FOR, yyline, yycolumn);
            }
          // fall through
          case 65: break;
          case 19:
            { symbolTable.addSymbol(yytext(), "OR", yyline, yycolumn, null);
    return new Symbol(sym.OR, yyline, yycolumn);
            }
          // fall through
          case 66: break;
          case 20:
            { symbolTable.addSymbol(yytext(), "DECREMENTO", yyline, yycolumn, null);
    return new Symbol(sym.DECREMENTO, yyline, yycolumn);
            }
          // fall through
          case 67: break;
          case 21:
            { symbolTable.addSymbol(yytext(), "TIPO_BOOLEANO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_BOOLEANO, yyline, yycolumn);
            }
          // fall through
          case 68: break;
          case 22:
            { symbolTable.addSymbol(yytext(), "DEFAULT", yyline, yycolumn, null);
    return new Symbol(sym.DEFAULT, yyline, yycolumn);
            }
          // fall through
          case 69: break;
          case 23:
            { symbolTable.addSymbol(yytext(), "SWITCH", yyline, yycolumn, null);
    return new Symbol(sym.SWITCH, yyline, yycolumn);
            }
          // fall through
          case 70: break;
          case 24:
            { symbolTable.addSymbol(yytext(), "ASIGNACION", yyline, yycolumn, null);
    return new Symbol(sym.ASIGNACION, yyline, yycolumn);
            }
          // fall through
          case 71: break;
          case 25:
            { symbolTable.addSymbol(yytext(), "AND", yyline, yycolumn, null);
    return new Symbol(sym.AND, yyline, yycolumn);
            }
          // fall through
          case 72: break;
          case 26:
            { symbolTable.addSymbol(yytext(), "MAYOR", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR, yyline, yycolumn);
            }
          // fall through
          case 73: break;
          case 27:
            { symbolTable.addSymbol(yytext(), "SUMA", yyline, yycolumn, null);
    return new Symbol(sym.SUMA, yyline, yycolumn);
            }
          // fall through
          case 74: break;
          case 28:
            { symbolTable.addSymbol(yytext(), "TIPO_ENTERO", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_ENTERO, yyline, yycolumn);
            }
          // fall through
          case 75: break;
          case 29:
            { symbolTable.addSymbol(yytext(), "MAYOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MAYOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 76: break;
          case 30:
            { symbolTable.addSymbol(yytext(), "MAIN", yyline, yycolumn, null);
    return new Symbol(-1, yyline, yycolumn);
            }
          // fall through
          case 77: break;
          case 31:
            { symbolTable.addSymbol(yytext(), "POTENCIA", yyline, yycolumn, null);
    return new Symbol(sym.POTENCIA, yyline, yycolumn);
            }
          // fall through
          case 78: break;
          case 32:
            { symbolTable.addSymbol(yytext(), "NOT", yyline, yycolumn, null);
    return new Symbol(sym.NOT, yyline, yycolumn);
            }
          // fall through
          case 79: break;
          case 33:
            { symbolTable.addSymbol(yytext(), "TIPO_FLOTANTE", yyline, yycolumn, null);
    return new Symbol(sym.TIPO_FLOTANTE, yyline, yycolumn);
            }
          // fall through
          case 80: break;
          case 34:
            { symbolTable.addSymbol(yytext(), "WHILE", yyline, yycolumn, null);
    return new Symbol(sym.WHILE, yyline, yycolumn);
            }
          // fall through
          case 81: break;
          case 35:
            { symbolTable.addSymbol(yytext(), "CASE", yyline, yycolumn, null);
    return new Symbol(sym.CASE, yyline, yycolumn);
            }
          // fall through
          case 82: break;
          case 36:
            { symbolTable.addSymbol(yytext(), "DIFERENTE", yyline, yycolumn, null);
    return new Symbol(sym.DIFERENTE, yyline, yycolumn);
            }
          // fall through
          case 83: break;
          case 37:
            { symbolTable.addSymbol(yytext(), "MENOR", yyline, yycolumn, null);
    return new Symbol(sym.MENOR, yyline, yycolumn);
            }
          // fall through
          case 84: break;
          case 38:
            { symbolTable.addSymbol(yytext(), "MENOR_IGUAL", yyline, yycolumn, null);
    return new Symbol(sym.MENOR_IGUAL, yyline, yycolumn);
            }
          // fall through
          case 85: break;
          case 39:
            { symbolTable.addSymbol(yytext(), "FIN_EXPRESION", yyline, yycolumn, null);
    return new Symbol(sym.FIN_EXPRESION, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 40:
            { symbolTable.addSymbol(yytext(), "LLAVE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 41:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_ABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 42:
            { symbolTable.addSymbol(yytext(), "MULTIPLICACION", yyline, yycolumn, null);
    return new Symbol(sym.MULTIPLICACION, yyline, yycolumn);
            }
          // fall through
          case 89: break;
          case 43:
            { symbolTable.addSymbol(yytext(), "CORCHETE_ABRE", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_ABRE, yyline, yycolumn);
            }
          // fall through
          case 90: break;
          case 44:
            { symbolTable.addSymbol(yytext(), "RESTA", yyline, yycolumn, null);
    return new Symbol(sym.RESTA, yyline, yycolumn);
            }
          // fall through
          case 91: break;
          case 45:
            { symbolTable.addSymbol(yytext(), "LLAVE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.LLAVE_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 46:
            { symbolTable.addSymbol(yytext(), "PARENTESIS_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.PARENTESIS_CIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 47:
            { symbolTable.addSymbol(yytext(), "CORCHETE_CIERRA", yyline, yycolumn, null);
    return new Symbol(sym.CORCHETE_CIERRA, yyline, yycolumn);
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
