package org.example;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\011\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\004\004\000\002\004\005\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\024\004\016\016\011\020\005\021\006\022" +
    "\012\046\017\047\014\051\013\063\010\001\002\000\004" +
    "\002\071\001\002\000\004\053\063\001\002\000\004\053" +
    "\055\001\002\000\030\002\uffff\004\uffff\016\uffff\020\uffff" +
    "\021\uffff\022\uffff\046\uffff\047\uffff\051\uffff\060\uffff\063" +
    "\uffff\001\002\000\030\002\ufff2\004\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\046\ufff2\047\ufff2\051\ufff2\060\ufff2\063" +
    "\ufff2\001\002\000\004\053\047\001\002\000\004\053\041" +
    "\001\002\000\004\053\035\001\002\000\004\004\033\001" +
    "\002\000\026\002\000\004\016\016\011\020\005\021\006" +
    "\022\012\046\017\047\014\051\013\063\010\001\002\000" +
    "\004\061\021\001\002\000\004\062\020\001\002\000\030" +
    "\002\ufff4\004\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\046" +
    "\ufff4\047\ufff4\051\ufff4\060\ufff4\063\ufff4\001\002\000\012" +
    "\005\025\006\024\007\022\010\023\001\002\000\004\062" +
    "\031\001\002\000\004\062\030\001\002\000\004\062\027" +
    "\001\002\000\004\062\026\001\002\000\030\002\ufffb\004" +
    "\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\046\ufffb\047\ufffb" +
    "\051\ufffb\060\ufffb\063\ufffb\001\002\000\030\002\ufffd\004" +
    "\ufffd\016\ufffd\020\ufffd\021\ufffd\022\ufffd\046\ufffd\047\ufffd" +
    "\051\ufffd\060\ufffd\063\ufffd\001\002\000\030\002\ufffa\004" +
    "\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\046\ufffa\047\ufffa" +
    "\051\ufffa\060\ufffa\063\ufffa\001\002\000\030\002\ufffc\004" +
    "\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\046\ufffc\047\ufffc" +
    "\051\ufffc\060\ufffc\063\ufffc\001\002\000\030\002\ufffe\004" +
    "\ufffe\016\ufffe\020\ufffe\021\ufffe\022\ufffe\046\ufffe\047\ufffe" +
    "\051\ufffe\060\ufffe\063\ufffe\001\002\000\004\062\034\001" +
    "\002\000\030\002\ufff3\004\ufff3\016\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\046\ufff3\047\ufff3\051\ufff3\060\ufff3\063\ufff3\001" +
    "\002\000\004\004\036\001\002\000\004\054\037\001\002" +
    "\000\004\062\040\001\002\000\030\002\ufff9\004\ufff9\016" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\046\ufff9\047\ufff9\051\ufff9" +
    "\060\ufff9\063\ufff9\001\002\000\004\004\042\001\002\000" +
    "\004\054\043\001\002\000\004\057\044\001\002\000\024" +
    "\004\016\016\011\020\005\021\006\022\012\046\017\047" +
    "\014\051\013\063\010\001\002\000\026\004\016\016\011" +
    "\020\005\021\006\022\012\046\017\047\014\051\013\060" +
    "\046\063\010\001\002\000\030\002\ufff5\004\ufff5\016\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\046\ufff5\047\ufff5\051\ufff5\060" +
    "\ufff5\063\ufff5\001\002\000\004\004\050\001\002\000\004" +
    "\054\051\001\002\000\004\057\052\001\002\000\024\004" +
    "\016\016\011\020\005\021\006\022\012\046\017\047\014" +
    "\051\013\063\010\001\002\000\026\004\016\016\011\020" +
    "\005\021\006\022\012\046\017\047\014\051\013\060\054" +
    "\063\010\001\002\000\030\002\ufff8\004\ufff8\016\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\046\ufff8\047\ufff8\051\ufff8\060\ufff8" +
    "\063\ufff8\001\002\000\004\004\056\001\002\000\004\054" +
    "\057\001\002\000\004\057\060\001\002\000\024\004\016" +
    "\016\011\020\005\021\006\022\012\046\017\047\014\051" +
    "\013\063\010\001\002\000\026\004\016\016\011\020\005" +
    "\021\006\022\012\046\017\047\014\051\013\060\062\063" +
    "\010\001\002\000\030\002\ufff6\004\ufff6\016\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\046\ufff6\047\ufff6\051\ufff6\060\ufff6\063" +
    "\ufff6\001\002\000\004\004\064\001\002\000\004\054\065" +
    "\001\002\000\004\057\066\001\002\000\024\004\016\016" +
    "\011\020\005\021\006\022\012\046\017\047\014\051\013" +
    "\063\010\001\002\000\026\004\016\016\011\020\005\021" +
    "\006\022\012\046\017\047\014\051\013\060\070\063\010" +
    "\001\002\000\030\002\ufff7\004\ufff7\016\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\046\ufff7\047\ufff7\051\ufff7\060\ufff7\063\ufff7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\010\002\003\003\014\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\044\004\006\001\001\000\004\004\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\052\004\006\001\001\000\004" +
    "\004\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\060\004\006" +
    "\001\001\000\004\004\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\066\004\006\001\001\000\004\004\031\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= IDENTIFICADOR ASIGNACION LITERAL_ENTERO FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= IDENTIFICADOR ASIGNACION LITERAL_FLOTANTE FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= IDENTIFICADOR ASIGNACION LITERAL_STRING FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= IDENTIFICADOR ASIGNACION LITERAL_CHAR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= PRINT PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= IF PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE lista_sentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= WHILE PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE lista_sentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= FOR PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE lista_sentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= SWITCH PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE lista_sentencias LLAVE_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= BREAK FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= RETURN IDENTIFICADOR FIN_EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= ERROR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
