
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\027\003\000\002\027\004\000\002\003\010" +
    "\000\002\003\007\000\002\004\004\000\002\011\003\000" +
    "\002\011\005\000\002\012\004\000\002\013\003\000\002" +
    "\013\006\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\010\005" +
    "\000\002\010\004\000\002\005\003\000\002\005\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\004\000\002\006\005\000\002\006\004\000\002\006\005" +
    "\000\002\006\005\000\002\015\004\000\002\015\006\000" +
    "\002\016\005\000\002\016\010\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\006\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\006\000\002" +
    "\007\005\000\002\026\003\000\002\026\005\000\002\017" +
    "\007\000\002\017\011\000\002\020\007\000\002\021\013" +
    "\000\002\022\011\000\002\022\014\000\002\023\003\000" +
    "\002\023\004\000\002\024\006\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\016\004\007\061\014\062\005\063\017\064" +
    "\016\065\011\001\002\000\016\004\007\061\014\062\005" +
    "\063\017\064\016\065\011\001\002\000\006\012\ufff3\060" +
    "\ufff3\001\002\000\016\004\ufffe\061\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\065\ufffe\001\002\000\004\005\035\001\002\000" +
    "\004\002\uffff\001\002\000\006\012\ufff0\060\ufff0\001\002" +
    "\000\004\002\242\001\002\000\004\060\023\001\002\000" +
    "\006\012\ufff4\060\ufff4\001\002\000\006\012\020\060\ufff6" +
    "\001\002\000\006\012\ufff1\060\ufff1\001\002\000\006\012" +
    "\ufff2\060\ufff2\001\002\000\004\053\021\001\002\000\004" +
    "\013\022\001\002\000\004\060\ufff5\001\002\000\004\010" +
    "\024\001\002\000\016\011\025\061\014\062\005\063\017" +
    "\064\016\065\011\001\002\000\004\005\035\001\002\000" +
    "\004\060\240\001\002\000\006\011\ufff9\066\ufff9\001\002" +
    "\000\006\011\031\066\032\001\002\000\004\005\035\001" +
    "\002\000\014\061\014\062\005\063\017\064\016\065\011" +
    "\001\002\000\006\011\ufff8\066\ufff8\001\002\000\016\004" +
    "\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\001\002" +
    "\000\060\006\050\010\060\016\063\017\044\020\052\022" +
    "\071\023\043\024\045\027\065\030\067\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\047\061" +
    "\014\062\005\063\017\064\016\065\011\001\002\000\064" +
    "\006\uffed\010\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed" +
    "\051\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\001\002" +
    "\000\024\010\060\032\037\051\061\053\053\054\070\055" +
    "\051\056\062\057\040\060\075\001\002\000\054\007\uffd8" +
    "\011\uffd8\013\uffd8\015\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\066" +
    "\uffd8\001\002\000\066\006\uffe9\007\uffe9\010\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\032\uffe9\051\uffe9\053\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\001\002\000\004\060\234\001\002" +
    "\000\004\010\224\001\002\000\024\010\060\032\037\051" +
    "\061\053\053\054\070\055\051\056\062\057\040\060\075" +
    "\001\002\000\004\010\202\001\002\000\066\006\uffe8\007" +
    "\uffe8\010\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\051" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\001\002\000" +
    "\052\007\uffd7\010\076\012\174\014\173\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\001\002\000\074\002\uffee\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032" +
    "\uffee\051\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\001" +
    "\002\000\054\007\uffda\011\uffda\013\uffda\015\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\050\uffda\066\uffda\001\002\000\004\010\165\001" +
    "\002\000\054\007\uffdc\011\uffdc\013\uffdc\015\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\066\uffdc\001\002\000\066\006\uffe7\007" +
    "\uffe7\010\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\051" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\001\002\000" +
    "\066\006\uffe6\007\uffe6\010\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\032\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\001\002\000\060\006\164\010\060\016\063\017\044" +
    "\020\052\022\071\023\043\024\045\027\065\030\067\032" +
    "\037\051\061\053\053\054\070\055\051\056\062\057\040" +
    "\060\047\061\014\062\005\063\017\064\016\065\011\001" +
    "\002\000\044\007\162\031\121\032\107\033\110\034\105" +
    "\035\114\036\111\037\103\040\117\041\102\042\101\043" +
    "\112\044\120\045\113\046\116\047\104\050\106\001\002" +
    "\000\024\010\060\032\037\051\061\053\053\054\070\055" +
    "\051\056\062\057\040\060\075\001\002\000\024\010\060" +
    "\032\037\051\061\053\053\054\070\055\051\056\062\057" +
    "\040\060\075\001\002\000\054\007\uffd9\011\uffd9\013\uffd9" +
    "\015\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\066\uffd9\001\002\000" +
    "\004\007\156\001\002\000\004\007\155\001\002\000\024" +
    "\010\060\032\037\051\061\053\053\054\070\055\051\056" +
    "\062\057\040\060\075\001\002\000\004\007\152\001\002" +
    "\000\004\060\150\001\002\000\054\007\uffdb\011\uffdb\013" +
    "\uffdb\015\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\066\uffdb\001\002" +
    "\000\004\010\072\001\002\000\024\010\060\032\037\051" +
    "\061\053\053\054\070\055\051\056\062\057\040\060\075" +
    "\001\002\000\004\011\146\001\002\000\046\007\uffb5\011" +
    "\uffb5\031\121\032\107\033\110\034\105\035\114\036\111" +
    "\037\103\040\117\041\102\042\101\043\112\044\120\045" +
    "\113\046\116\047\104\050\106\001\002\000\060\007\uffd7" +
    "\010\076\011\uffd7\012\077\013\uffd7\015\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\066\uffd7\001\002\000\026\010\060\011\140" +
    "\032\037\051\061\053\053\054\070\055\051\056\062\057" +
    "\040\060\075\001\002\000\024\010\060\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\075\001" +
    "\002\000\044\013\115\031\121\032\107\033\110\034\105" +
    "\035\114\036\111\037\103\040\117\041\102\042\101\043" +
    "\112\044\120\045\113\046\116\047\104\050\106\001\002" +
    "\000\024\010\060\032\037\051\061\053\053\054\070\055" +
    "\051\056\062\057\040\060\075\001\002\000\024\010\060" +
    "\032\037\051\061\053\053\054\070\055\051\056\062\057" +
    "\040\060\075\001\002\000\054\007\uffce\011\uffce\013\uffce" +
    "\015\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\066\uffce\001\002\000" +
    "\024\010\060\032\037\051\061\053\053\054\070\055\051" +
    "\056\062\057\040\060\075\001\002\000\024\010\060\032" +
    "\037\051\061\053\053\054\070\055\051\056\062\057\040" +
    "\060\075\001\002\000\024\010\060\032\037\051\061\053" +
    "\053\054\070\055\051\056\062\057\040\060\075\001\002" +
    "\000\024\010\060\032\037\051\061\053\053\054\070\055" +
    "\051\056\062\057\040\060\075\001\002\000\024\010\060" +
    "\032\037\051\061\053\053\054\070\055\051\056\062\057" +
    "\040\060\075\001\002\000\024\010\060\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\075\001" +
    "\002\000\024\010\060\032\037\051\061\053\053\054\070" +
    "\055\051\056\062\057\040\060\075\001\002\000\024\010" +
    "\060\032\037\051\061\053\053\054\070\055\051\056\062" +
    "\057\040\060\075\001\002\000\024\010\060\032\037\051" +
    "\061\053\053\054\070\055\051\056\062\057\040\060\075" +
    "\001\002\000\054\007\uffd6\011\uffd6\013\uffd6\015\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\066\uffd6\001\002\000\024\010\060" +
    "\032\037\051\061\053\053\054\070\055\051\056\062\057" +
    "\040\060\075\001\002\000\054\007\uffcd\011\uffcd\013\uffcd" +
    "\015\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\066\uffcd\001\002\000" +
    "\024\010\060\032\037\051\061\053\053\054\070\055\051" +
    "\056\062\057\040\060\075\001\002\000\024\010\060\032" +
    "\037\051\061\053\053\054\070\055\051\056\062\057\040" +
    "\060\075\001\002\000\054\007\uffd5\011\uffd5\013\uffd5\015" +
    "\uffd5\031\uffd5\032\uffd5\033\110\034\105\035\114\036\111" +
    "\037\103\040\117\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\066\uffd5\001\002\000\054" +
    "\007\uffc9\011\uffc9\013\uffc9\015\uffc9\031\121\032\107\033" +
    "\110\034\105\035\114\036\111\037\103\040\117\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\066\uffc9\001\002\000\054\007\uffc7\011\uffc7\013\uffc7" +
    "\015\uffc7\031\121\032\107\033\110\034\105\035\114\036" +
    "\111\037\103\040\117\041\102\042\101\043\112\044\120" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\066\uffc7\001\002\000" +
    "\054\007\uffd1\011\uffd1\013\uffd1\015\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\111\037\103\040\117\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\066\uffd1\001\002\000\054\007\uffc8\011\uffc8\013" +
    "\uffc8\015\uffc8\031\121\032\107\033\110\034\105\035\114" +
    "\036\111\037\103\040\117\041\102\042\101\043\112\044" +
    "\120\045\uffc8\046\uffc8\047\uffc8\050\uffc8\066\uffc8\001\002" +
    "\000\054\007\uffca\011\uffca\013\uffca\015\uffca\031\121\032" +
    "\107\033\110\034\105\035\114\036\111\037\103\040\117" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\066\uffca\001\002\000\054\007\uffd0\011\uffd0" +
    "\013\uffd0\015\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\103\040\117\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\066\uffd0\001" +
    "\002\000\054\007\uffd3\011\uffd3\013\uffd3\015\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\111\037\103\040" +
    "\117\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\066\uffd3\001\002\000\054\007\uffd4\011" +
    "\uffd4\013\uffd4\015\uffd4\031\uffd4\032\uffd4\033\110\034\105" +
    "\035\114\036\111\037\103\040\117\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\066\uffd4" +
    "\001\002\000\054\007\uffc5\011\uffc5\013\uffc5\015\uffc5\031" +
    "\121\032\107\033\110\034\105\035\114\036\111\037\103" +
    "\040\117\041\102\042\101\043\112\044\120\045\113\046" +
    "\116\047\uffc5\050\uffc5\066\uffc5\001\002\000\054\007\uffd2" +
    "\011\uffd2\013\uffd2\015\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\111\037\103\040\117\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\066" +
    "\uffd2\001\002\000\054\007\uffc6\011\uffc6\013\uffc6\015\uffc6" +
    "\031\121\032\107\033\110\034\105\035\114\036\111\037" +
    "\103\040\117\041\102\042\101\043\112\044\120\045\113" +
    "\046\116\047\uffc6\050\uffc6\066\uffc6\001\002\000\054\007" +
    "\uffcc\011\uffcc\013\uffcc\015\uffcc\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\066\uffcc\001\002\000\054\007\uffcb\011\uffcb\013\uffcb\015" +
    "\uffcb\031\121\032\107\033\110\034\105\035\114\036\111" +
    "\037\103\040\117\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\066\uffcb\001\002\000\054" +
    "\007\uffc1\011\uffc1\013\uffc1\015\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\066\uffc1\001\002\000\046\011\uffc0\031\121\032\107" +
    "\033\110\034\105\035\114\036\111\037\103\040\117\041" +
    "\102\042\101\043\112\044\120\045\113\046\116\047\104" +
    "\050\106\066\uffc0\001\002\000\006\011\144\066\143\001" +
    "\002\000\024\010\060\032\037\051\061\053\053\054\070" +
    "\055\051\056\062\057\040\060\075\001\002\000\054\007" +
    "\uffc2\011\uffc2\013\uffc2\015\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\066\uffc2\001\002\000\046\011\uffbf\031\121\032\107\033" +
    "\110\034\105\035\114\036\111\037\103\040\117\041\102" +
    "\042\101\043\112\044\120\045\113\046\116\047\104\050" +
    "\106\066\uffbf\001\002\000\004\005\035\001\002\000\066" +
    "\006\uffbc\007\uffbc\010\uffbc\016\uffbc\017\uffbc\020\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\032\uffbc\051\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\001\002\000\004\007\151\001\002\000\066\006\uffe1\007" +
    "\uffe1\010\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\051" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\001\002\000" +
    "\066\006\uffea\007\uffea\010\uffea\016\uffea\017\uffea\020\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\032\uffea\051\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065" +
    "\uffea\001\002\000\044\007\154\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\102\042" +
    "\101\043\112\044\120\045\113\046\116\047\104\050\106" +
    "\001\002\000\066\006\uffe2\007\uffe2\010\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\032\uffe2\051\uffe2\053\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\065\uffe2\001\002\000\066\006\uffeb\007\uffeb\010" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb\051\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\065\uffeb\001\002\000\066\006" +
    "\uffe5\007\uffe5\010\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\051\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\001" +
    "\002\000\054\007\uffc4\011\uffc4\013\uffc4\015\uffc4\031\121" +
    "\032\107\033\110\034\105\035\114\036\111\037\103\040" +
    "\117\041\102\042\101\043\112\044\120\045\113\046\116" +
    "\047\uffc4\050\uffc4\066\uffc4\001\002\000\044\011\161\031" +
    "\121\032\107\033\110\034\105\035\114\036\111\037\103" +
    "\040\117\041\102\042\101\043\112\044\120\045\113\046" +
    "\116\047\104\050\106\001\002\000\054\007\uffc3\011\uffc3" +
    "\013\uffc3\015\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\066\uffc3\001" +
    "\002\000\066\006\uffe3\007\uffe3\010\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\001\002\000\064\006\uffec\010\uffec\016\uffec" +
    "\017\uffec\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\032\uffec\051\uffec\053\uffec\054\uffec" +
    "\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\065\uffec\001\002\000\074\002\uffef\004\uffef" +
    "\006\uffef\007\uffef\010\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\032\uffef\051\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\001\002\000\024\010\060\032\037\051\061\053" +
    "\053\054\070\055\051\056\062\057\040\060\075\001\002" +
    "\000\004\011\167\001\002\000\004\005\035\001\002\000" +
    "\070\006\uffbe\007\uffbe\010\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\021\171\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\032\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\001\002\000\004\005\035\001\002\000\066" +
    "\006\uffbd\007\uffbd\010\uffbd\016\uffbd\017\uffbd\020\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\032\uffbd\051\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\001\002\000\024\010\060\032\037\051\061\053\053\054" +
    "\070\055\051\056\062\057\040\060\075\001\002\000\024" +
    "\010\060\032\037\051\061\053\053\054\070\055\051\056" +
    "\062\057\040\060\075\001\002\000\044\013\176\031\121" +
    "\032\107\033\110\034\105\035\114\036\111\037\103\040" +
    "\117\041\102\042\101\043\112\044\120\045\113\046\116" +
    "\047\104\050\106\001\002\000\046\007\uffd6\014\177\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\001\002\000\024\010\060\032\037" +
    "\051\061\053\053\054\070\055\051\056\062\057\040\060" +
    "\075\001\002\000\044\007\uffdd\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\102\042" +
    "\101\043\112\044\120\045\113\046\116\047\104\050\106" +
    "\001\002\000\044\007\uffde\031\121\032\107\033\110\034" +
    "\105\035\114\036\111\037\103\040\117\041\102\042\101" +
    "\043\112\044\120\045\113\046\116\047\104\050\106\001" +
    "\002\000\024\010\060\032\037\051\061\053\053\054\070" +
    "\055\051\056\062\057\040\060\075\001\002\000\044\011" +
    "\204\031\121\032\107\033\110\034\105\035\114\036\111" +
    "\037\103\040\117\041\102\042\101\043\112\044\120\045" +
    "\113\046\116\047\104\050\106\001\002\000\004\005\205" +
    "\001\002\000\004\025\207\001\002\000\010\006\uffb8\025" +
    "\uffb8\026\uffb8\001\002\000\024\010\060\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\075\001" +
    "\002\000\010\006\211\025\207\026\212\001\002\000\066" +
    "\006\uffba\007\uffba\010\uffba\016\uffba\017\uffba\020\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\051\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\001\002\000\004\015\214\001\002\000\010\006\uffb7\025" +
    "\uffb7\026\uffb7\001\002\000\056\010\060\016\063\017\044" +
    "\020\052\022\071\023\043\024\045\027\065\030\067\032" +
    "\037\051\061\053\053\054\070\055\051\056\062\057\040" +
    "\060\047\061\014\062\005\063\017\064\016\065\011\001" +
    "\002\000\060\006\216\010\060\016\063\017\044\020\052" +
    "\022\071\023\043\024\045\027\065\030\067\032\037\051" +
    "\061\053\053\054\070\055\051\056\062\057\040\060\047" +
    "\061\014\062\005\063\017\064\016\065\011\001\002\000" +
    "\066\006\uffb9\007\uffb9\010\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\001\002\000\044\015\220\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\102\042" +
    "\101\043\112\044\120\045\113\046\116\047\104\050\106" +
    "\001\002\000\056\010\060\016\063\017\044\020\052\022" +
    "\071\023\043\024\045\027\065\030\067\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\047\061" +
    "\014\062\005\063\017\064\016\065\011\001\002\000\064" +
    "\006\uffb6\010\060\016\063\017\044\020\052\022\071\023" +
    "\043\024\045\025\uffb6\026\uffb6\027\065\030\067\032\037" +
    "\051\061\053\053\054\070\055\051\056\062\057\040\060" +
    "\047\061\014\062\005\063\017\064\016\065\011\001\002" +
    "\000\044\007\223\031\121\032\107\033\110\034\105\035" +
    "\114\036\111\037\103\040\117\041\102\042\101\043\112" +
    "\044\120\045\113\046\116\047\104\050\106\001\002\000" +
    "\066\006\uffe4\007\uffe4\010\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\032\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\001\002\000\056\010\060\016\063\017\044\020\052" +
    "\022\071\023\043\024\045\027\065\030\067\032\037\051" +
    "\061\053\053\054\070\055\051\056\062\057\040\060\047" +
    "\061\014\062\005\063\017\064\016\065\011\001\002\000" +
    "\004\007\226\001\002\000\024\010\060\032\037\051\061" +
    "\053\053\054\070\055\051\056\062\057\040\060\075\001" +
    "\002\000\004\007\230\001\002\000\024\010\060\032\037" +
    "\051\061\053\053\054\070\055\051\056\062\057\040\060" +
    "\075\001\002\000\044\011\232\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\102\042" +
    "\101\043\112\044\120\045\113\046\116\047\104\050\106" +
    "\001\002\000\004\005\035\001\002\000\066\006\uffbb\007" +
    "\uffbb\010\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\051" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000" +
    "\006\007\uffe0\014\235\001\002\000\024\010\060\032\037" +
    "\051\061\053\053\054\070\055\051\056\062\057\040\060" +
    "\075\001\002\000\044\007\uffdf\031\121\032\107\033\110" +
    "\034\105\035\114\036\111\037\103\040\117\041\102\042" +
    "\101\043\112\044\120\045\113\046\116\047\104\050\106" +
    "\001\002\000\054\007\uffcf\011\uffcf\013\uffcf\015\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\103" +
    "\040\117\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\066\uffcf\001\002\000\006\011\ufff7" +
    "\066\ufff7\001\002\000\016\004\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufffa\001\002\000\016\004\ufffd\061\ufffd\062" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\016\002\011\003\005\004\007\013\012\014" +
    "\014\027\003\001\001\000\012\003\243\004\244\013\012" +
    "\014\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\027\012\026\013\025\014\014\001\001" +
    "\000\004\010\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\033\001\001\000\010" +
    "\012\032\013\025\014\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\055\006\035\007\056\013\041" +
    "\014\014\015\063\016\065\017\040\020\045\021\053\022" +
    "\054\001\001\000\002\001\001\000\004\007\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\162\007\056\013" +
    "\041\014\014\015\063\016\065\017\040\020\045\021\053" +
    "\022\054\001\001\000\002\001\001\000\004\007\157\001" +
    "\001\000\004\007\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\073\025\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\140" +
    "\026\141\001\001\000\004\007\077\001\001\000\002\001" +
    "\001\000\004\007\136\001\001\000\004\007\135\001\001" +
    "\000\002\001\001\000\004\007\134\001\001\000\004\007" +
    "\133\001\001\000\004\007\132\001\001\000\004\007\131" +
    "\001\001\000\004\007\130\001\001\000\004\007\127\001" +
    "\001\000\004\007\126\001\001\000\004\007\125\001\001" +
    "\000\004\007\124\001\001\000\002\001\001\000\004\007" +
    "\123\001\001\000\002\001\001\000\004\007\122\001\001" +
    "\000\004\007\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\025\165" +
    "\001\001\000\002\001\001\000\004\010\167\001\001\000" +
    "\002\001\001\000\004\010\171\001\001\000\002\001\001" +
    "\000\004\007\200\001\001\000\004\007\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\207" +
    "\024\205\001\001\000\002\001\001\000\004\007\216\001" +
    "\001\000\004\024\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\214\006\035\007" +
    "\056\013\041\014\014\015\063\016\065\017\040\020\045" +
    "\021\053\022\054\001\001\000\026\006\162\007\056\013" +
    "\041\014\014\015\063\016\065\017\040\020\045\021\053" +
    "\022\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\220\006\035\007\056\013\041\014\014\015\063" +
    "\016\065\017\040\020\045\021\053\022\054\001\001\000" +
    "\026\006\162\007\056\013\041\014\014\015\063\016\065" +
    "\017\040\020\045\021\053\022\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\224\007\056\013\041" +
    "\014\014\015\063\016\065\017\040\020\045\021\053\022" +
    "\054\001\001\000\002\001\001\000\006\007\073\025\226" +
    "\001\001\000\002\001\001\000\004\007\230\001\001\000" +
    "\002\001\001\000\004\010\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function_declaration_list main_function 
            {
              Program RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDeclarationList fdl = (FunctionDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainFunction mf = (MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main_function 
            {
              Program RESULT =null;
		int mfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MainFunction mf = (MainFunction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function_declaration_list ::= function_declaration 
            {
              FunctionDeclarationList RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_declaration_list ::= function_declaration_list function_declaration 
            {
              FunctionDeclarationList RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDeclarationList fdl = (FunctionDeclarationList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= type IDENTIFIER ABREREGALO parameter_list CIERRAREGALO block 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= type IDENTIFIER ABREREGALO CIERRAREGALO block 
            {
              FunctionDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_function ::= MAIN block 
            {
              MainFunction RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main_function",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter_list ::= parameter 
            {
              ParameterList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter_list ::= parameter_list COMA parameter 
            {
              ParameterList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParameterList pl = (ParameterList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameter ::= type IDENTIFIER 
            {
              Parameter RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= base_type 
            {
              Type RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BaseType bt = (BaseType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= base_type ABREEMPAQUE INT_LITERAL CIERRAEMPAQUE 
            {
              Type RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		BaseType bt = (BaseType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // base_type ::= RODOLFO 
            {
              BaseType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // base_type ::= BROMISTA 
            {
              BaseType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // base_type ::= TRUENO 
            {
              BaseType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // base_type ::= CUPIDO 
            {
              BaseType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // base_type ::= COMETA 
            {
              BaseType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= ABRECUENTO statement_list CIERRACUENTO 
            {
              Block RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= ABRECUENTO CIERRACUENTO 
            {
              Block RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= statement_list statement 
            {
              StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= var_declaration FINREGALO 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= assignment FINREGALO 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignmentStatement a = (AssignmentStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= while_statement 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatement ws = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatement fs = (ForStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= switch_statement 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SwitchStatement ss = (SwitchStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= CORTA FINREGALO 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= ENVIA expression FINREGALO 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= expression FINREGALO 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= NARRA expression FINREGALO 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= ESCUCHA IDENTIFIER FINREGALO 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_declaration ::= type IDENTIFIER 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_declaration ::= type IDENTIFIER ENTREGA expression 
            {
              VariableDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= IDENTIFIER ENTREGA expression 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= IDENTIFIER ABREEMPAQUE expression CIERRAEMPAQUE ENTREGA expression 
            {
              AssignmentStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression idx = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= INT_LITERAL 
            {
              Expression RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= FLOAT_LITERAL 
            {
              Expression RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= CHAR_LITERAL 
            {
              Expression RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character cl = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= BOOL_LITERAL 
            {
              Expression RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= IDENTIFIER ABREEMPAQUE expression CIERRAEMPAQUE 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression idx = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression NAVIDAD expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression INTERCAMBIO expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression REYES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression NOCHEBUENA expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression MAGOS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression ADVIENTO expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= INTERCAMBIO expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression QUIEN 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression GRINCH 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression SNOWBALL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression EVERGREEN expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression MINSTIX expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression UPATREE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression MARY expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression OPENSLAE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression MELCHOR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression GASPAR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= BALTAZAR expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= ABREREGALO expression CIERRAREGALO 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= IDENTIFIER ABREREGALO expression_list CIERRAREGALO 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= IDENTIFIER ABREREGALO CIERRAREGALO 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_list ::= expression 
            {
              ExpressionList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_list ::= expression_list COMA expression 
            {
              ExpressionList RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionList el = (ExpressionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_statement ::= ELFO ABREREGALO condition CIERRAREGALO block 
            {
              IfStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_statement ::= ELFO ABREREGALO condition CIERRAREGALO block HADA block 
            {
              IfStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_statement ::= ENVUELVE ABREREGALO condition CIERRAREGALO block 
            {
              WhileStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // for_statement ::= DUENDE ABREREGALO statement FINREGALO condition FINREGALO expression CIERRAREGALO block 
            {
              ForStatement RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // switch_statement ::= VARIOS ABREREGALO expression CIERRAREGALO ABRECUENTO case_list CIERRACUENTO 
            {
              SwitchStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // switch_statement ::= VARIOS ABREREGALO expression CIERRAREGALO ABRECUENTO case_list ULTIMO SIGUE statement_list CIERRACUENTO 
            {
              SwitchStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("switch_statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_list ::= case_statement 
            {
              CaseList RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement cs = (CaseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // case_list ::= case_list case_statement 
            {
              CaseList RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CaseList cl = (CaseList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CaseStatement cs = (CaseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // case_statement ::= HISTORIA expression SIGUE statement_list 
            {
              CaseStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
