/* CUP specification for the compiler project */
package org.example;

import java_cup.runtime.*;

/* Terminals (tokens from the lexer) */
terminal            MAIN, ABRECUENTO, CIERRACUENTO, FINREGALO, ERROR;
terminal            ABREREGALO, CIERRAREGALO, ABREEMPAQUE, CIERRAEMPAQUE;
terminal            ENTREGA, SIGUE, CORTA, ENVIA;
terminal            ELFO, HADA, ENVUELVE, DUENDE, VARIOS, HISTORIA, ULTIMO;
terminal            NARRA, ESCUCHA;
terminal            NAVIDAD, INTERCAMBIO, REYES, NOCHEBUENA, MAGOS, ADVIENTO;
terminal            QUIEN, GRINCH;
terminal            SNOWBALL, EVERGREEN, MINSTIX, UPATREE, MARY, OPENSLAE;
terminal            MELCHOR, GASPAR, BALTAZAR;
terminal            UMINUS;
terminal Integer    LITERAL_ENTERO;
terminal Float      LITERAL_FLOTANTE;
terminal String     LITERAL_STRING;
terminal Character  LITERAL_CHAR;
terminal Boolean    LITERAL_BOOLEANO;
terminal String     IDENTIFICADOR;
terminal            RODOLFO, BROMISTA, TRUENO, CUPIDO, COMETA;
terminal            COMA;

/* Non-terminals */
non terminal program;
non terminal function_declaration;
non terminal main_function;
non terminal statement_list;
non terminal statement;
non terminal expression;
non terminal block;
non terminal parameter_list;
non terminal parameter;
non terminal type;
non terminal base_type;
non terminal var_declaration;
terminal ASIGNACION;
terminal IF;
terminal ELSE;
terminal IGUAL;
terminal BREAK;
terminal RETURN;
terminal MODULO;
terminal PRINT;
terminal INCREMENTO;
terminal DIVISION;
terminal DOS_PUNTOS;
terminal TIPO_STRING;
terminal TIPO_CHAR;
terminal WHILE;
terminal FOR;
terminal SWITCH;
terminal DECREMENTO;
terminal TIPO_BOOLEANO;
terminal DEFAULT;
non terminal case_list;
non terminal case_statement;
non terminal condition;
non terminal expression_list;
terminal READ;
terminal AND;
terminal OR;
terminal MAYOR;
terminal SUMA;
terminal TIPO_ENTERO;
terminal MAYOR_IGUAL;
terminal POTENCIA;
terminal NOT;
terminal TIPO_FLOTANTE;
terminal CASE;
terminal DIFERENTE;
terminal MENOR;
terminal MENOR_IGUAL;
terminal FIN_EXPRESION;
terminal LLAVE_ABRE;
terminal PARENTESIS_ABRE;
terminal MULTIPLICACION;
terminal CORCHETE_ABRE;
terminal RESTA;
terminal LLAVE_CIERRA;
terminal PARENTESIS_CIERRA;
terminal CORCHETE_CIERRA;
terminal function_declaration_list;

/* Precedence declarations */
precedence left MELCHOR, GASPAR;
precedence right BALTAZAR;
precedence left MARY, OPENSLAE;
precedence left SNOWBALL, EVERGREEN, MINSTIX, UPATREE;
precedence left NAVIDAD, INTERCAMBIO;
precedence left NOCHEBUENA, REYES, MAGOS;
precedence left ADVIENTO;
precedence right UMINUS;
precedence left QUIEN, GRINCH;

/* The grammar rules */
program ::= function_declaration_list:fdl main_function:mf
         | main_function:mf
         ;

function_declaration_list ::= function_declaration:fd
                          | function_declaration_list:fdl function_declaration:fd
                          ;

function_declaration ::= type:t IDENTIFICADOR:id ABREREGALO parameter_list:pl CIERRAREGALO block:b
                      | type:t IDENTIFICADOR:id ABREREGALO CIERRAREGALO block:b
                      ;

main_function ::= MAIN block:b
                ;

parameter_list ::= parameter:p
                | parameter_list:pl COMA parameter:p
                ;

parameter ::= type:t IDENTIFICADOR:id
            ;

type ::= base_type:bt
       | base_type:bt ABREEMPAQUE LITERAL_ENTERO:size CIERRAEMPAQUE
       ;

base_type ::= RODOLFO
            | BROMISTA
            | TRUENO
            | CUPIDO
            | COMETA
            ;

block ::= ABRECUENTO statement_list:sl CIERRACUENTO
        | ABRECUENTO CIERRACUENTO
        ;

statement_list ::= statement:s
                | statement_list:sl statement:s
                ;

statement ::= var_declaration:vd FINREGALO
           | ASIGNACION:a FINREGALO
           | IF:is
           | WHILE:ws
           | FOR:fs

           | CORTA FINREGALO
           | ENVIA expression:e FINREGALO
           | expression:e FINREGALO
           | NARRA expression:e FINREGALO
           | ESCUCHA IDENTIFICADOR:id FINREGALO
           ;

var_declaration ::= type:t IDENTIFICADOR:id
                 | type:t IDENTIFICADOR:id ENTREGA expression:e
                 ;

ASIGNACION ::= IDENTIFICADOR:id ENTREGA expression:e
             | IDENTIFICADOR:id ABREEMPAQUE expression:idx CIERRAEMPAQUE ENTREGA expression:e
             ;

expression ::= LITERAL_ENTERO:il
             | LITERAL_FLOTANTE:fl
             | LITERAL_STRING:sl
             | LITERAL_CHAR:cl
             | LITERAL_BOOLEANO:bl
             | IDENTIFICADOR:id
             | IDENTIFICADOR:id ABREEMPAQUE expression:idx CIERRAEMPAQUE
             | expression:e1 NAVIDAD expression:e2
             | expression:e1 INTERCAMBIO expression:e2
             | expression:e1 REYES expression:e2
             | expression:e1 NOCHEBUENA expression:e2
             | expression:e1 MAGOS expression:e2
             | expression:e1 ADVIENTO expression:e2
             | INTERCAMBIO expression:e              %prec UMINUS
             | expression:e1 QUIEN
             | expression:e1 GRINCH
             | expression:e1 SNOWBALL expression:e2
             | expression:e1 EVERGREEN expression:e2
             | expression:e1 MINSTIX expression:e2
             | expression:e1 UPATREE expression:e2
             | expression:e1 MARY expression:e2
             | expression:e1 OPENSLAE expression:e2
             | expression:e1 MELCHOR expression:e2
             | expression:e1 GASPAR expression:e2
             | BALTAZAR expression:e
             | ABREREGALO expression:e CIERRAREGALO
             | IDENTIFICADOR:id ABREREGALO expression_list:el CIERRAREGALO
             | IDENTIFICADOR:id ABREREGALO CIERRAREGALO
             ;

expression_list ::= expression:e
                 | expression_list:el COMA expression:e
                 ;

IF ::= ELFO ABREREGALO condition:c CIERRAREGALO block:b
               | ELFO ABREREGALO condition:c CIERRAREGALO block:b1 HADA block:b2
               ;

WHILE ::= ENVUELVE ABREREGALO condition:c CIERRAREGALO block:b
                 ;

FOR ::= DUENDE ABREREGALO statement:s1 FINREGALO condition:c FINREGALO expression:e CIERRAREGALO block:b
                ;

case_list ::= case_statement:cs
            | case_list:cl case_statement:cs
            ;

case_statement ::= HISTORIA expression:e SIGUE statement_list:sl
                ;

condition ::= expression:e
           ;