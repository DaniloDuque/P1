/* CUP specification for the compiler project */
package org.example;

import java_cup.runtime.*;

terminal Integer ENTERO;
terminal Float FLOTANTE;
terminal Character CARACTER;
terminal String CADENA;
terminal Boolean BOOLEANO;
terminal COMA, IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN;
terminal DOS_PUNTOS, SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA;
terminal ASIGNACION, INCREMENTO, DECREMENTO, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
terminal IGUAL, DIFERENTE, AND, OR, NOT, PRINT, CORCHETE_ABRE, CORCHETE_CIERRA;
terminal MAIN, READ, LIT_ENTERO, LIT_FLOTANTE, LIT_CADENA, LIT_CHAR, LIT_BOOL;
terminal LLAVE_ABRE, LLAVE_CIERRA, PARENTESIS_ABRE, PARENTESIS_CIERRA, FIN_EXPRESION;
terminal IDENTIFICADOR, ERROR;

/* Non-terminals */
non terminal Object program;
non terminal Object func_declarations, func_declaration, params_opt, param_list;
non terminal Object param, type, statement, statements;
non terminal Object var_declaration, assignment, array_declaration;
non terminal Object expression, arithmetic_expr, term;
non terminal Object relational_expr, logical_expr;
non terminal Object if_statement, else_opt, while_statement, for_statement;
non terminal Object switch_statement, cases, case_statement, default_opt;
non terminal Object io_statement, element_list;
non terminal Object literal;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence right POTENCIA;
precedence right NOT;
precedence right INCREMENTO, DECREMENTO;

/* Grammar rules */
program ::= func_declarations:f MAIN LLAVE_ABRE statements:s LLAVE_CIERRA
          | MAIN LLAVE_ABRE statements:s LLAVE_CIERRA
          ;

func_declarations ::= func_declaration:f func_declarations:fs
                   | func_declaration:f
                   ;

func_declaration ::= type:t IDENTIFICADOR:i PARENTESIS_ABRE params_opt:p PARENTESIS_CIERRA LLAVE_ABRE statements:s LLAVE_CIERRA
                  ;

params_opt ::= param_list:p
             | /* empty */
             ;

param_list ::= param:p COMA param_list:pl
             | param:p
             ;

param ::= type:t IDENTIFICADOR:i
        ;

type ::= ENTERO
       | FLOTANTE
       | BOOLEANO
       | CARACTER
       | CADENA
       ;

statements ::= statement:s statements:ss
             | /* empty */
             ;

statement ::= var_declaration:v
            | assignment:a
            | if_statement:i
            | while_statement:w
            | io_statement:io FIN_EXPRESION
            | RETURN expression:e FIN_EXPRESION
            | BREAK FIN_EXPRESION
            ;

var_declaration ::= type:t IDENTIFICADOR:i ASIGNACION expression:e FIN_EXPRESION
                 ;

assignment ::= IDENTIFICADOR:i ASIGNACION expression:e FIN_EXPRESION
            ;

expression ::= arithmetic_expr:a
             | relational_expr:r
             | logical_expr:l
             | literal:l
             | IDENTIFICADOR:i
             | PARENTESIS_ABRE expression:e PARENTESIS_CIERRA
             ;

literal ::= LIT_ENTERO
          | LIT_FLOTANTE
          | LIT_CADENA
          | LIT_CHAR
          | LIT_BOOL
          ;

arithmetic_expr ::= expression:e1 SUMA expression:e2
                 | expression:e1 RESTA expression:e2
                 | expression:e1 MULTIPLICACION expression:e2
                 | expression:e1 DIVISION expression:e2
                 | expression:e1 MODULO expression:e2
                 | expression:e1 POTENCIA expression:e2
                 | RESTA expression:e
                 | INCREMENTO expression:e
                 | DECREMENTO expression:e
                 ;

relational_expr ::= expression:e1 MENOR expression:e2
                 | expression:e1 MENOR_IGUAL expression:e2
                 | expression:e1 MAYOR expression:e2
                 | expression:e1 MAYOR_IGUAL expression:e2
                 | expression:e1 IGUAL expression:e2
                 | expression:e1 DIFERENTE expression:e2
                 ;

logical_expr ::= expression:e1 AND expression:e2
               | expression:e1 OR expression:e2
               | NOT expression:e
               ;

if_statement ::= IF PARENTESIS_ABRE expression:e PARENTESIS_CIERRA LLAVE_ABRE statements:s LLAVE_CIERRA else_opt:eo
               ;

else_opt ::= ELSE LLAVE_ABRE statements:s LLAVE_CIERRA
           | /* empty */
           ;

while_statement ::= WHILE PARENTESIS_ABRE expression:e PARENTESIS_CIERRA LLAVE_ABRE statements:s LLAVE_CIERRA
                 ;

io_statement ::= PRINT PARENTESIS_ABRE expression:e PARENTESIS_CIERRA
               | READ PARENTESIS_ABRE IDENTIFICADOR:i PARENTESIS_CIERRA
               ;