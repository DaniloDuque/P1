/* CUP specification for the compiler project */
package org.example;

import java_cup.runtime.*;

terminal Integer ENTERO;
terminal Float FLOTANTE;
terminal Character CARACTER;
terminal String CADENA;
terminal Boolean BOOLEANO;
terminal COMA, IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN;
terminal DOS_PUNTOS, SUMA, RESTA, DIVISION, MULTIPLICACION, MODULO, POTENCIA;
terminal ASIGNACION, INCREMENTO, DECREMENTO, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
terminal IGUAL, DIFERENTE, AND, OR, NOT, PRINT, CORCHETE_ABRE, CORCHETE_CIERRA;
terminal MAIN, READ, LIT_ENTERO, LIT_FLOTANTE, LIT_CADENA, LIT_CHAR, LIT_BOOL;
terminal LLAVE_ABRE, LLAVE_CIERRA, PARENTESIS_ABRE, PARENTESIS_CIERRA, FIN_EXPRESION;
terminal IDENTIFICADOR, ERROR;

/* Non-terminals */
non terminal Object program;
non terminal Object func_declarations, func_declaration, params_opt, param_list;
non terminal Object param, type, statement, statements;
non terminal Object var_declaration, assignment, array_declaration;
non terminal Object expression, arithmetic_expr, term;
non terminal Object relational_expr, logical_expr;
non terminal Object if_statement, else_opt, while_statement, for_statement;
non terminal Object switch_statement, cases, case_statement, default_opt;
non terminal Object io_statement, element_list;
non terminal Object identifier_list;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION, MODULO;
precedence right POTENCIA;
precedence right NOT;
precedence right INCREMENTO, DECREMENTO;

/* Grammar rules */
program ::= func_declarations MAIN LLAVE_ABRE statements LLAVE_CIERRA
          | MAIN LLAVE_ABRE statements LLAVE_CIERRA
          ;

func_declarations ::= func_declaration func_declarations
                   | func_declaration
                   ;

func_declaration ::= type IDENTIFICADOR PARENTESIS_ABRE params_opt PARENTESIS_CIERRA LLAVE_ABRE statements LLAVE_CIERRA
                  ;

params_opt ::= param_list
             | /* empty */
             ;

param_list ::= param COMA param_list
             | param
             ;

param ::= type IDENTIFICADOR
        ;

type ::= ENTERO
       | FLOTANTE
       | BOOLEANO
       | CARACTER
       | CADENA
       ;

statements ::= statement statements
             | /* empty */
             ;

statement ::= var_declaration
            | assignment
            | array_declaration
            | if_statement
            | while_statement
            | for_statement
            | switch_statement
            | io_statement
            | RETURN expression FIN_EXPRESION
            | BREAK FIN_EXPRESION
            ;

var_declaration ::= type IDENTIFICADOR ASIGNACION expression FIN_EXPRESION
                 ;

assignment ::= IDENTIFICADOR ASIGNACION expression FIN_EXPRESION
            ;

array_declaration ::= type IDENTIFICADOR CORCHETE_ABRE IDENTIFICADOR CORCHETE_CIERRA ASIGNACION LLAVE_ABRE element_list LLAVE_CIERRA FIN_EXPRESION
                   ;

element_list ::= expression COMA element_list
               | expression
               ;

expression ::= arithmetic_expr
             | relational_expr
             | logical_expr
             | LIT_ENTERO
             | LIT_FLOTANTE
             | LIT_CADENA
             | LIT_CHAR
             | LIT_BOOL
             | IDENTIFICADOR
             ;

arithmetic_expr ::= expression SUMA expression
                 | expression RESTA expression
                 | expression MULTIPLICACION expression
                 | expression DIVISION expression
                 | expression MODULO expression
                 | expression POTENCIA expression
                 | RESTA expression
                 | INCREMENTO expression
                 | DECREMENTO expression
                 ;

relational_expr ::= expression MENOR expression
                 | expression MENOR_IGUAL expression
                 | expression MAYOR expression
                 | expression MAYOR_IGUAL expression
                 | expression IGUAL expression
                 | expression DIFERENTE expression
                 ;

logical_expr ::= expression AND expression
               | expression OR expression
               | NOT expression
               ;

if_statement ::= IF PARENTESIS_ABRE expression PARENTESIS_CIERRA LLAVE_ABRE statements LLAVE_CIERRA else_opt
               ;

else_opt ::= ELSE LLAVE_ABRE statements LLAVE_CIERRA
           | /* empty */
           ;

while_statement ::= WHILE PARENTESIS_ABRE expression PARENTESIS_CIERRA LLAVE_ABRE statements LLAVE_CIERRA
                 ;

for_statement ::= FOR PARENTESIS_ABRE var_declaration expression FIN_EXPRESION expression PARENTESIS_CIERRA LLAVE_ABRE statements LLAVE_CIERRA
                ;

switch_statement ::= SWITCH PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA LLAVE_ABRE cases default_opt LLAVE_CIERRA
                  ;

cases ::= case_statement cases
        | /* empty */
        ;

case_statement ::= CASE LIT_ENTERO DOS_PUNTOS statement
                ;

default_opt ::= DEFAULT DOS_PUNTOS statement
              | /* empty */
              ;

io_statement ::= PRINT PARENTESIS_ABRE expression PARENTESIS_CIERRA FIN_EXPRESION
               | READ PARENTESIS_ABRE IDENTIFICADOR PARENTESIS_CIERRA FIN_EXPRESION
               ;